

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Mar 22 20:16:40 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001120                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _uc3V3SupplyInitSequence
    42  001120  38                 	db	56
    43  001121  39                 	db	57
    44  001122  14                 	db	20
    45  001123  74                 	db	116
    46  001124  54                 	db	84
    47  001125  6F                 	db	111
    48  001126  0C                 	db	12
    49  001127  01                 	db	1
    50                           
    51                           ;initializer for _uc5VSupplyInitSequence
    52  001128  38                 	db	56
    53  001129  39                 	db	57
    54  00112A  14                 	db	20
    55  00112B  79                 	db	121
    56  00112C  50                 	db	80
    57  00112D  6C                 	db	108
    58  00112E  0F                 	db	15
    59  00112F  01                 	db	1
    60                           
    61                           	psect	smallconst
    62  000800                     __psmallconst:
    63                           	opt stack 0
    64  000800                     _dpowers:
    65                           	opt stack 0
    66  000800  0001               	dw	1
    67  000802  000A               	dw	10
    68  000804  0064               	dw	100
    69  000806  03E8               	dw	1000
    70  000808  2710               	dw	10000
    71  00080A                     __end_of_dpowers:
    72                           	opt stack 0
    73  0000                     _ADCON0	set	4034
    74  0000                     _ADCON0bits	set	4034
    75  0000                     _ADCON1	set	4033
    76  0000                     _ADRESH	set	4036
    77  0000                     _PIR1bits	set	3998
    78  0000                     _PORTAbits	set	3968
    79  0000                     _PORTBbits	set	3969
    80  0000                     _SSPBUF	set	4041
    81  0000                     _SSPCON1	set	4038
    82  0000                     _SSPCON1bits	set	4038
    83  0000                     _SSPCON2	set	4037
    84  0000                     _SSPCON2bits	set	4037
    85  0000                     _SSPSTAT	set	4039
    86  0000                     _SSPSTATbits	set	4039
    87  0000                     _TRISAbits	set	3986
    88  0000                     _TRISBbits	set	3987
    89  00080A                     __stringdata:
    90                           	opt stack 0
    91  00080A                     STR_1:
    92  00080A  48                 	db	72	;'H'
    93  00080B  65                 	db	101	;'e'
    94  00080C  6C                 	db	108	;'l'
    95  00080D  6C                 	db	108	;'l'
    96  00080E  6F                 	db	111	;'o'
    97  00080F  20                 	db	32
    98  000810  57                 	db	87	;'W'
    99  000811  6F                 	db	111	;'o'
   100  000812  72                 	db	114	;'r'
   101  000813  6C                 	db	108	;'l'
   102  000814  64                 	db	100	;'d'
   103  000815  20                 	db	32
   104  000816  0A                 	db	10
   105  000817  4D                 	db	77	;'M'
   106  000818  6F                 	db	111	;'o'
   107  000819  74                 	db	116	;'t'
   108  00081A  68                 	db	104	;'h'
   109  00081B  65                 	db	101	;'e'
   110  00081C  72                 	db	114	;'r'
   111  00081D  66                 	db	102	;'f'
   112  00081E  75                 	db	117	;'u'
   113  00081F  63                 	db	99	;'c'
   114  000820  6B                 	db	107	;'k'
   115  000821  65                 	db	101	;'e'
   116  000822  72                 	db	114	;'r'
   117  000823  20                 	db	32
   118  000824  00                 	db	0
   119  000825                     STR_2:
   120  000825  63                 	db	99	;'c'
   121  000826  6E                 	db	110	;'n'
   122  000827  74                 	db	116	;'t'
   123  000828  3A                 	db	58	;':'
   124  000829  20                 	db	32
   125  00082A  25                 	db	37
   126  00082B  30                 	db	48	;'0'
   127  00082C  36                 	db	54	;'6'
   128  00082D  69                 	db	105	;'i'
   129  00082E  20                 	db	32
   130  00082F  0A                 	db	10
   131  000830  20                 	db	32
   132  000831  25                 	db	37
   133  000832  69                 	db	105	;'i'
   134  000833  20                 	db	32
   135  000834  64                 	db	100	;'d'
   136  000835  65                 	db	101	;'e'
   137  000836  67                 	db	103	;'g'
   138  000837  43                 	db	67	;'C'
   139  000838  2C                 	db	44
   140  000839  20                 	db	32
   141  00083A  25                 	db	37
   142  00083B  69                 	db	105	;'i'
   143  00083C  00                 	db	0
   144  00083D                     __end_of__stringdata:
   145                           	opt stack 0
   146                           
   147                           ; #config settings
   148  00083D  00                 	db	0	; dummy byte at the end
   149  0000                     
   150                           	psect	cinit
   151  00103E                     __pcinit:
   152                           	opt stack 0
   153  00103E                     start_initialization:
   154                           	opt stack 0
   155  00103E                     __initialization:
   156                           	opt stack 0
   157                           
   158                           ; Clear objects allocated to BANK0 (33 bytes)
   159  00103E  EE00  F0A0         	lfsr	0,__pbssBANK0
   160  001042  0E21               	movlw	33
   161  001044                     clear_0:
   162  001044  6AEE               	clrf	postinc0,c
   163  001046  06E8               	decf	wreg,f,c
   164  001048  E1FD               	bnz	clear_0
   165                           
   166                           ; Initialize objects allocated to COMRAM (16 bytes)
   167                           ; load TBLPTR registers with __pidataCOMRAM
   168  00104A  0E20               	movlw	low __pidataCOMRAM
   169  00104C  6EF6               	movwf	tblptrl,c
   170  00104E  0E11               	movlw	high __pidataCOMRAM
   171  001050  6EF7               	movwf	tblptrh,c
   172  001052  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   173  001054  6EF8               	movwf	tblptru,c
   174  001056  EE00  F031         	lfsr	0,__pdataCOMRAM
   175  00105A  EE10 F010          	lfsr	1,16
   176  00105E                     copy_data0:
   177  00105E  0009               	tblrd		*+
   178  001060  CFF5 FFEE          	movff	tablat,postinc0
   179  001064  50E5               	movf	postdec1,w,c
   180  001066  50E1               	movf	fsr1l,w,c
   181  001068  E1FA               	bnz	copy_data0
   182  00106A                     end_of_initialization:
   183                           	opt stack 0
   184  00106A                     __end_of__initialization:
   185                           	opt stack 0
   186  00106A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   187  00106C  6EF8               	movwf	tblptru,c
   188  00106E  0100               	movlb	0
   189  001070  EFE7  F005         	goto	_main	;jump to C main() function
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           postdec1	equ	0xFE5
   197                           fsr1l	equ	0xFE1
   198                           
   199                           	psect	dataCOMRAM
   200  000031                     __pdataCOMRAM:
   201                           	opt stack 0
   202  000031                     _uc3V3SupplyInitSequence:
   203                           	opt stack 0
   204  000031                     	ds	8
   205  000039                     _uc5VSupplyInitSequence:
   206                           	opt stack 0
   207  000039                     	ds	8
   208                           tblptru	equ	0xFF8
   209                           tblptrh	equ	0xFF7
   210                           tblptrl	equ	0xFF6
   211                           tablat	equ	0xFF5
   212                           postinc0	equ	0xFEE
   213                           wreg	equ	0xFE8
   214                           postdec1	equ	0xFE5
   215                           fsr1l	equ	0xFE1
   216                           
   217                           	psect	bssBANK0
   218  0000A0                     __pbssBANK0:
   219                           	opt stack 0
   220  0000A0                     main@F5358:
   221                           	opt stack 0
   222  0000A0                     	ds	33
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1l	equ	0xFE1
   231                           
   232                           	psect	cstackBANK0
   233  000060                     __pcstackBANK0:
   234                           	opt stack 0
   235  000060                     ?_sprintf:
   236                           	opt stack 0
   237  000060                     sprintf@sp:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x0
   241  000060                     	ds	2
   242  000062                     sprintf@f:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x2
   246  000062                     	ds	8
   247  00006A                     sprintf@ap:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0xA
   251  00006A                     	ds	2
   252  00006C                     sprintf@prec:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0xC
   256  00006C                     	ds	1
   257  00006D                     sprintf@_val:
   258                           	opt stack 0
   259                           
   260                           ; 5 bytes @ 0xD
   261  00006D                     	ds	5
   262  000072                     sprintf@flag:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x12
   266  000072                     	ds	1
   267  000073                     sprintf@width:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x13
   271  000073                     	ds	2
   272  000075                     sprintf@c:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x15
   276  000075                     	ds	1
   277  000076                     ??_main:
   278                           
   279                           ; 0 bytes @ 0x16
   280  000076                     	ds	2
   281  000078                     main@str:
   282                           	opt stack 0
   283                           
   284                           ; 33 bytes @ 0x18
   285  000078                     	ds	33
   286  000099                     main@temp:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x39
   290  000099                     	ds	1
   291  00009A                     main@count:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x3A
   295  00009A                     	ds	2
   296  00009C                     main@i:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x3C
   300  00009C                     	ds	2
   301  00009E                     main@i_364:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x3E
   305  00009E                     	ds	2
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	cstackCOMRAM
   316  000001                     __pcstackCOMRAM:
   317                           	opt stack 0
   318  000001                     ??_low_isr:
   319  000001                     
   320                           ; 1 bytes @ 0x0
   321  000001                     	ds	17
   322  000012                     ??_high_isr:
   323                           
   324                           ; 0 bytes @ 0x11
   325  000012                     	ds	14
   326  000020                     ?_OpenI2C:
   327                           	opt stack 0
   328  000020                     ?_isdigit:
   329                           	opt stack 0
   330  000020                     ?_WriteI2C:
   331                           	opt stack 0
   332  000020                     ?___lwdiv:
   333                           	opt stack 0
   334  000020                     ?___wmul:
   335                           	opt stack 0
   336  000020                     OpenI2C@sync_mode:
   337                           	opt stack 0
   338  000020                     WriteI2C@data_out:
   339                           	opt stack 0
   340  000020                     isdigit@c:
   341                           	opt stack 0
   342  000020                     resetLcd@i:
   343                           	opt stack 0
   344  000020                     ___lwdiv@dividend:
   345                           	opt stack 0
   346  000020                     ___wmul@multiplier:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x1F
   350  000020                     	ds	1
   351  000021                     ?_write_cmd:
   352                           	opt stack 0
   353  000021                     ??_isdigit:
   354  000021                     ?_readTCN75:
   355                           	opt stack 0
   356  000021                     readTCN75@addr:
   357                           	opt stack 0
   358  000021                     write_cmd@ucCtrl:
   359                           	opt stack 0
   360  000021                     OpenI2C@slew:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x20
   364  000021                     	ds	1
   365  000022                     ??_initI2C:
   366  000022                     write_cmd@ucData:
   367                           	opt stack 0
   368  000022                     _isdigit$1286:
   369                           	opt stack 0
   370  000022                     ___lwdiv@divisor:
   371                           	opt stack 0
   372  000022                     ___wmul@multiplicand:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x21
   376  000022                     	ds	1
   377  000023                     ??_write_cmd:
   378  000023                     ??_readTCN75:
   379                           
   380                           ; 0 bytes @ 0x22
   381  000023                     	ds	1
   382  000024                     ?_initLcd:
   383                           	opt stack 0
   384  000024                     ??_clearLcd:
   385  000024                     ?_printStringLcd:
   386                           	opt stack 0
   387  000024                     ??___lwdiv:
   388  000024                     readTCN75@tmpHi:
   389                           	opt stack 0
   390  000024                     printStringLcd@ucStr:
   391                           	opt stack 0
   392  000024                     ___wmul@product:
   393                           	opt stack 0
   394  000024                     initLcd@ulOptions:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x23
   398  000024                     	ds	1
   399  000025                     ___lwdiv@quotient:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x24
   403  000025                     	ds	1
   404  000026                     ??_printStringLcd:
   405                           
   406                           ; 0 bytes @ 0x25
   407  000026                     	ds	1
   408  000027                     ___lwdiv@counter:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x26
   412  000027                     	ds	1
   413  000028                     ??_initLcd:
   414  000028                     ?___lwmod:
   415                           	opt stack 0
   416  000028                     ___lwmod@dividend:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x27
   420  000028                     	ds	1
   421  000029                     initLcd@ucInitSequence:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x28
   425  000029                     	ds	1
   426  00002A                     ___lwmod@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x29
   430  00002A                     	ds	1
   431  00002B                     initLcd@i:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2A
   435  00002B                     	ds	1
   436  00002C                     ??___lwmod:
   437                           
   438                           ; 0 bytes @ 0x2B
   439  00002C                     	ds	1
   440  00002D                     ___lwmod@counter:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x2C
   444  00002D                     	ds	1
   445  00002E                     ??_sprintf:
   446                           
   447                           ; 0 bytes @ 0x2D
   448  00002E                     	ds	3
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458 ;;
   459 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   460 ;;
   461 ;; *************** function _main *****************
   462 ;; Defined at:
   463 ;;		line 39 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  i               2   62[BANK0 ] int 
   468 ;;  i               2   60[BANK0 ] int 
   469 ;;  temp            1   57[BANK0 ] unsigned char 
   470 ;;  str            33   24[BANK0 ] unsigned char [33]
   471 ;;  count           2   58[BANK0 ] int 
   472 ;; Return value:  Size  Location     Type
   473 ;;		None               void
   474 ;; Registers used:
   475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   481 ;;      Params:         0       0       0       0       0       0       0       0       0
   482 ;;      Locals:         0      40       0       0       0       0       0       0       0
   483 ;;      Temps:          0       2       0       0       0       0       0       0       0
   484 ;;      Totals:         0      42       0       0       0       0       0       0       0
   485 ;;Total ram usage:       42 bytes
   486 ;; Hardware stack levels required when called:    6
   487 ;; This function calls:
   488 ;;		_ConfigureOscillator
   489 ;;		_InitApp
   490 ;;		_resetLcd
   491 ;;		_initLcd
   492 ;;		_clearLcd
   493 ;;		_printStringLcd
   494 ;;		_write_cmd
   495 ;;		_readTCN75
   496 ;;		_sprintf
   497 ;; This function is called by:
   498 ;;		Startup code after reset
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text0
   503  000BCE                     __ptext0:
   504                           	opt stack 0
   505  000BCE                     _main:
   506                           	opt stack 25
   507                           
   508                           ;main.c: 41: ConfigureOscillator();
   509                           
   510                           ;incstack = 0
   511                           ;incstack = 0
   512  000BCE  ECA3  F008         	call	_ConfigureOscillator	;wreg free
   513                           
   514                           ;main.c: 44: InitApp();
   515  000BD2  EC9E  F008         	call	_InitApp	;wreg free
   516                           
   517                           ;main.c: 49: resetLcd();
   518  000BD6  EC4C  F008         	call	_resetLcd	;wreg free
   519                           
   520                           ;main.c: 51: initLcd(0x00UL);
   521  000BDA  0E00               	movlw	0
   522  000BDC  6E24               	movwf	?_initLcd,c
   523  000BDE  0E00               	movlw	0
   524  000BE0  6E25               	movwf	?_initLcd+1,c
   525  000BE2  0E00               	movlw	0
   526  000BE4  6E26               	movwf	?_initLcd+2,c
   527  000BE6  0E00               	movlw	0
   528  000BE8  6E27               	movwf	?_initLcd+3,c
   529  000BEA  EC40  F007         	call	_initLcd	;wreg free
   530                           
   531                           ;main.c: 53: ADCON0 = 0b00000101;
   532  000BEE  0E05               	movlw	5
   533  000BF0  6EC2               	movwf	4034,c	;volatile
   534                           
   535                           ;main.c: 54: ADCON1 = 0b00001101;
   536  000BF2  0E0D               	movlw	13
   537  000BF4  6EC1               	movwf	4033,c	;volatile
   538                           
   539                           ;main.c: 56: TRISAbits.TRISA3 = 0;
   540  000BF6  9692               	bcf	3986,3,c	;volatile
   541                           
   542                           ;main.c: 57: PORTAbits.RA3 = 0;
   543  000BF8  9680               	bcf	3968,3,c	;volatile
   544                           
   545                           ;main.c: 59: clearLcd();
   546  000BFA  EC7A  F008         	call	_clearLcd	;wreg free
   547                           
   548                           ;main.c: 61: printStringLcd( "Hello World \n"
   549                           ;main.c: 62: "Motherfucker ");
   550  000BFE  0E08               	movlw	high STR_1
   551  000C00  6E25               	movwf	?_printStringLcd+1,c
   552  000C02  0E0A               	movlw	low STR_1
   553  000C04  6E24               	movwf	?_printStringLcd,c
   554  000C06  EC92  F006         	call	_printStringLcd	;wreg free
   555                           
   556                           ;main.c: 64: write_cmd(0x00UL, ( (0x08 | ((1 != 0) << 2) | (0 != 0) << 1) | (0 != 0)));
   557  000C0A  0100               	movlb	0	; () banked
   558  000C0C  6F76               	movwf	??_main& (0+255),b
   559  000C0E  0E00               	movlw	0
   560  000C10  6E21               	movwf	?_write_cmd,c
   561  000C12  0100               	movlb	0	; () banked
   562  000C14  5176               	movf	??_main& (0+255),w,b
   563  000C16  0100               	movlb	0	; () banked
   564  000C18  6F77               	movwf	(??_main+1)& (0+255),b
   565  000C1A  0E0C               	movlw	12
   566  000C1C  6E22               	movwf	?_write_cmd+1,c
   567  000C1E  0100               	movlb	0	; () banked
   568  000C20  5177               	movf	(??_main+1)& (0+255),w,b
   569  000C22  ECE3  F007         	call	_write_cmd	;wreg free
   570                           
   571                           ;main.c: 65: int count = 10000;
   572  000C26  0E27               	movlw	39
   573  000C28  0100               	movlb	0	; () banked
   574  000C2A  0100               	movlb	0	; () banked
   575  000C2C  6F9B               	movwf	(main@count+1)& (0+255),b
   576  000C2E  0E10               	movlw	16
   577  000C30  0100               	movlb	0	; () banked
   578  000C32  6F9A               	movwf	main@count& (0+255),b
   579                           
   580                           ; BSR set to: 0
   581                           ;main.c: 66: char str[33] = {0};
   582  000C34  EE20  F0A0         	lfsr	2,main@F5358
   583  000C38  EE10  F078         	lfsr	1,main@str
   584  000C3C  0E21               	movlw	33
   585  000C3E                     u1261:
   586  000C3E  CFDE FFE6          	movff	postinc2,postinc1
   587  000C42  2EE8               	decfsz	wreg,f,c
   588  000C44  D7FC               	goto	u1261
   589  000C46                     l1654:
   590                           
   591                           ; BSR set to: 0
   592                           ;main.c: 68: {
   593                           ;main.c: 69: PORTBbits.RB4 = 1;
   594  000C46  8881               	bsf	3969,4,c	;volatile
   595                           
   596                           ; BSR set to: 0
   597                           ;main.c: 70: for(int i=0; i<0x3ff; i++);
   598  000C48  0E00               	movlw	0
   599  000C4A  0100               	movlb	0	; () banked
   600  000C4C  0100               	movlb	0	; () banked
   601  000C4E  6F9D               	movwf	(main@i+1)& (0+255),b
   602  000C50  0E00               	movlw	0
   603  000C52  0100               	movlb	0	; () banked
   604  000C54  6F9C               	movwf	main@i& (0+255),b
   605  000C56                     
   606                           ; BSR set to: 0
   607  000C56  0100               	movlb	0	; () banked
   608  000C58  0100               	movlb	0	; () banked
   609  000C5A  519D               	movf	(main@i+1)& (0+255),w,b
   610  000C5C  0A80               	xorlw	128
   611  000C5E  0F7D               	addlw	-131
   612  000C60  0EFF               	movlw	255
   613  000C62  B4D8               	btfsc	status,2,c
   614  000C64  5D9C               	subwf	main@i& (0+255),w,b
   615  000C66  B0D8               	btfsc	status,0,c
   616  000C68  D005               	goto	l53
   617                           
   618                           ; BSR set to: 0
   619                           
   620                           ; BSR set to: 0
   621                           
   622                           ; BSR set to: 0
   623  000C6A  0100               	movlb	0	; () banked
   624  000C6C  0100               	movlb	0	; () banked
   625  000C6E  4B9C               	infsnz	main@i& (0+255),f,b
   626  000C70  2B9D               	incf	(main@i+1)& (0+255),f,b
   627  000C72  D7F1               	goto	L1
   628  000C74                     l53:
   629                           
   630                           ; BSR set to: 0
   631                           ;main.c: 71: PORTBbits.RB4 = 0;
   632  000C74  9881               	bcf	3969,4,c	;volatile
   633                           
   634                           ; BSR set to: 0
   635                           ;main.c: 72: for(int i=0; i<0x3ff; i++);
   636  000C76  0E00               	movlw	0
   637  000C78  0100               	movlb	0	; () banked
   638  000C7A  0100               	movlb	0	; () banked
   639  000C7C  6F9F               	movwf	(main@i_364+1)& (0+255),b
   640  000C7E  0E00               	movlw	0
   641  000C80  0100               	movlb	0	; () banked
   642  000C82  6F9E               	movwf	main@i_364& (0+255),b
   643  000C84                     
   644                           ; BSR set to: 0
   645  000C84  0100               	movlb	0	; () banked
   646  000C86  0100               	movlb	0	; () banked
   647  000C88  519F               	movf	(main@i_364+1)& (0+255),w,b
   648  000C8A  0A80               	xorlw	128
   649  000C8C  0F7D               	addlw	-131
   650  000C8E  0EFF               	movlw	255
   651  000C90  B4D8               	btfsc	status,2,c
   652  000C92  5D9E               	subwf	main@i_364& (0+255),w,b
   653  000C94  B0D8               	btfsc	status,0,c
   654  000C96  D005               	goto	l1676
   655                           
   656                           ; BSR set to: 0
   657                           
   658                           ; BSR set to: 0
   659                           
   660                           ; BSR set to: 0
   661  000C98  0100               	movlb	0	; () banked
   662  000C9A  0100               	movlb	0	; () banked
   663  000C9C  4B9E               	infsnz	main@i_364& (0+255),f,b
   664  000C9E  2B9F               	incf	(main@i_364+1)& (0+255),f,b
   665  000CA0  D7F1               	goto	L2
   666  000CA2                     l1676:
   667                           
   668                           ; BSR set to: 0
   669                           ;main.c: 73: char temp = readTCN75(0b111);
   670  000CA2  0100               	movlb	0	; () banked
   671  000CA4  6F76               	movwf	??_main& (0+255),b
   672  000CA6  0E07               	movlw	7
   673  000CA8  6E21               	movwf	?_readTCN75,c
   674  000CAA  0100               	movlb	0	; () banked
   675  000CAC  5176               	movf	??_main& (0+255),w,b
   676  000CAE  EC0E  F007         	call	_readTCN75	;wreg free
   677  000CB2  5021               	movf	?_readTCN75,w,c
   678  000CB4  0100               	movlb	0	; () banked
   679  000CB6  0100               	movlb	0	; () banked
   680  000CB8  6F99               	movwf	main@temp& (0+255),b
   681                           
   682                           ; BSR set to: 0
   683                           ;main.c: 74: ADCON0bits.GO_NOT_DONE = 1;
   684  000CBA  82C2               	bsf	4034,1,c	;volatile
   685  000CBC                     l56:
   686  000CBC  B2C2               	btfsc	4034,1,c	;volatile
   687  000CBE  D7FE               	goto	l56
   688                           
   689                           ;main.c: 76: clearLcd();
   690  000CC0  EC7A  F008         	call	_clearLcd	;wreg free
   691                           
   692                           ;main.c: 77: sprintf(str,"cnt: %06i \n %i degC, %i", count, temp, ADRESH);
   693  000CC4  0100               	movlb	0	; () banked
   694  000CC6  0E00               	movlw	high main@str
   695  000CC8  0100               	movlb	0	; () banked
   696  000CCA  0100               	movlb	0	; () banked
   697  000CCC  6F61               	movwf	(?_sprintf+1)& (0+255),b
   698  000CCE  0100               	movlb	0	; () banked
   699  000CD0  0E78               	movlw	low main@str
   700  000CD2  0100               	movlb	0	; () banked
   701  000CD4  6F60               	movwf	?_sprintf& (0+255),b
   702  000CD6  0E08               	movlw	high STR_2
   703  000CD8  0100               	movlb	0	; () banked
   704  000CDA  0100               	movlb	0	; () banked
   705  000CDC  6F63               	movwf	(?_sprintf+3)& (0+255),b
   706  000CDE  0E25               	movlw	low STR_2
   707  000CE0  0100               	movlb	0	; () banked
   708  000CE2  6F62               	movwf	(?_sprintf+2)& (0+255),b
   709  000CE4  C09A  F064         	movff	main@count,?_sprintf+4
   710  000CE8  C09B  F065         	movff	main@count+1,?_sprintf+5
   711  000CEC  0100               	movlb	0	; () banked
   712  000CEE  0100               	movlb	0	; () banked
   713  000CF0  C099  F066         	movff	main@temp,?_sprintf+6
   714  000CF4  0100               	movlb	0	; () banked
   715  000CF6  0100               	movlb	0	; () banked
   716  000CF8  6B67               	clrf	(?_sprintf+7)& (0+255),b
   717  000CFA  0100               	movlb	0	; () banked
   718  000CFC  CFC4 F068          	movff	4036,?_sprintf+8	;volatile
   719  000D00  0100               	movlb	0	; () banked
   720  000D02  0100               	movlb	0	; () banked
   721  000D04  6B69               	clrf	(?_sprintf+9)& (0+255),b
   722  000D06  EC1F  F004         	call	_sprintf	;wreg free
   723                           
   724                           ;main.c: 78: printStringLcd(str);
   725  000D0A  0100               	movlb	0	; () banked
   726  000D0C  0E00               	movlw	high main@str
   727  000D0E  6E25               	movwf	?_printStringLcd+1,c
   728  000D10  0100               	movlb	0	; () banked
   729  000D12  0E78               	movlw	low main@str
   730  000D14  6E24               	movwf	?_printStringLcd,c
   731  000D16  EC92  F006         	call	_printStringLcd	;wreg free
   732                           
   733                           ;main.c: 79: count++;
   734  000D1A  0100               	movlb	0	; () banked
   735  000D1C  0100               	movlb	0	; () banked
   736  000D1E  4B9A               	infsnz	main@count& (0+255),f,b
   737  000D20  2B9B               	incf	(main@count+1)& (0+255),f,b
   738  000D22  D791               	goto	l1654
   739  000D24                     __end_of_main:
   740                           	opt stack 0
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           postinc1	equ	0xFE6
   748                           postdec1	equ	0xFE5
   749                           fsr1l	equ	0xFE1
   750                           postinc2	equ	0xFDE
   751                           status	equ	0xFD8
   752                           
   753 ;; *************** function _sprintf *****************
   754 ;; Defined at:
   755 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   758 ;;		 -> main@str(33), 
   759 ;;  f               2    2[BANK0 ] PTR const unsigned char 
   760 ;;		 -> STR_2(24), 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;  _val            5   13[BANK0 ] struct .
   763 ;;  width           2   19[BANK0 ] int 
   764 ;;  ap              2   10[BANK0 ] PTR void [1]
   765 ;;		 -> ?_sprintf(2), 
   766 ;;  c               1   21[BANK0 ] char 
   767 ;;  flag            1   18[BANK0 ] unsigned char 
   768 ;;  prec            1   12[BANK0 ] char 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2    0[BANK0 ] int 
   771 ;; Registers used:
   772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   778 ;;      Params:         0      10       0       0       0       0       0       0       0
   779 ;;      Locals:         0      12       0       0       0       0       0       0       0
   780 ;;      Temps:          3       0       0       0       0       0       0       0       0
   781 ;;      Totals:         3      22       0       0       0       0       0       0       0
   782 ;;Total ram usage:       25 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    3
   785 ;; This function calls:
   786 ;;		_isdigit
   787 ;;		___lwdiv
   788 ;;		___lwmod
   789 ;;		___wmul
   790 ;; This function is called by:
   791 ;;		_main
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text1
   796  00083E                     __ptext1:
   797                           	opt stack 0
   798  00083E                     _sprintf:
   799                           	opt stack 27
   800                           
   801                           ;doprnt.c: 494: va_list ap;
   802                           ;doprnt.c: 499: signed char c;
   803                           ;doprnt.c: 501: int width;
   804                           ;doprnt.c: 506: signed char prec;
   805                           ;doprnt.c: 508: unsigned char flag;
   806                           ;doprnt.c: 527: union {
   807                           ;doprnt.c: 528: unsigned int _val;
   808                           ;doprnt.c: 529: struct {
   809                           ;doprnt.c: 530: const char * _cp;
   810                           ;doprnt.c: 531: unsigned _len;
   811                           ;doprnt.c: 532: } _str;
   812                           ;doprnt.c: 533: } _val;
   813                           ;doprnt.c: 542: *ap = __va_start();
   814                           
   815                           ; BSR set to: 0
   816                           ;incstack = 0
   817                           ;incstack = 0
   818  00083E  0100               	movlb	0	; () banked
   819  000840  0E00               	movlw	high (?_sprintf+4)
   820  000842  0100               	movlb	0	; () banked
   821  000844  0100               	movlb	0	; () banked
   822  000846  6F6B               	movwf	(sprintf@ap+1)& (0+255),b
   823  000848  0100               	movlb	0	; () banked
   824  00084A  0E64               	movlw	low (?_sprintf+4)
   825  00084C  0100               	movlb	0	; () banked
   826  00084E  6F6A               	movwf	sprintf@ap& (0+255),b
   827                           
   828                           ;doprnt.c: 545: while(c = *f++) {
   829  000850  D1A6               	goto	l1798
   830  000852                     l1690:
   831                           
   832                           ; BSR set to: 0
   833                           ;doprnt.c: 547: if(c != '%')
   834  000852  0100               	movlb	0	; () banked
   835  000854  0100               	movlb	0	; () banked
   836  000856  5175               	movf	sprintf@c& (0+255),w,b
   837  000858  0A25               	xorlw	37
   838  00085A  B4D8               	btfsc	status,2,c
   839  00085C  D00C               	goto	l1696
   840                           
   841                           ; BSR set to: 0
   842                           ;doprnt.c: 549: {
   843                           ;doprnt.c: 550: ((*sp++ = (c)));
   844  00085E  C060  FFD9         	movff	sprintf@sp,fsr2l
   845  000862  C061  FFDA         	movff	sprintf@sp+1,fsr2h
   846  000866  0100               	movlb	0	; () banked
   847  000868  C075  FFDF         	movff	sprintf@c,indf2
   848                           
   849                           ; BSR set to: 0
   850  00086C  0100               	movlb	0	; () banked
   851  00086E  0100               	movlb	0	; () banked
   852  000870  4B60               	infsnz	sprintf@sp& (0+255),f,b
   853  000872  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
   854                           
   855                           ;doprnt.c: 551: continue;
   856  000874  D194               	goto	l1798
   857  000876                     l1696:
   858                           
   859                           ; BSR set to: 0
   860                           ;doprnt.c: 552: }
   861                           ;doprnt.c: 555: width = 0;
   862  000876  0E00               	movlw	0
   863  000878  0100               	movlb	0	; () banked
   864  00087A  0100               	movlb	0	; () banked
   865  00087C  6F74               	movwf	(sprintf@width+1)& (0+255),b
   866  00087E  0E00               	movlw	0
   867  000880  0100               	movlb	0	; () banked
   868  000882  6F73               	movwf	sprintf@width& (0+255),b
   869                           
   870                           ; BSR set to: 0
   871                           ;doprnt.c: 557: flag = 0;
   872  000884  6E2E               	movwf	??_sprintf& (0+255),c
   873  000886  0E00               	movlw	0
   874  000888  0100               	movlb	0	; () banked
   875  00088A  0100               	movlb	0	; () banked
   876  00088C  6F72               	movwf	sprintf@flag& (0+255),b
   877  00088E  502E               	movf	??_sprintf& (0+255),w,c
   878  000890  D007               	goto	l1704
   879  000892                     l1700:
   880                           
   881                           ; BSR set to: 0
   882                           ;doprnt.c: 589: flag |= 0x04;
   883  000892  0100               	movlb	0	; () banked
   884  000894  0100               	movlb	0	; () banked
   885  000896  8572               	bsf	sprintf@flag& (0+255),2,b
   886                           
   887                           ;doprnt.c: 590: f++;
   888  000898  0100               	movlb	0	; () banked
   889  00089A  0100               	movlb	0	; () banked
   890  00089C  4B62               	infsnz	sprintf@f& (0+255),f,b
   891  00089E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
   892  0008A0                     l1704:
   893                           
   894                           ; BSR set to: 0
   895  0008A0  0100               	movlb	0	; () banked
   896  0008A2  C062  FFF6         	movff	sprintf@f,tblptrl
   897  0008A6  0100               	movlb	0	; () banked
   898  0008A8  C063  FFF7         	movff	sprintf@f+1,tblptrh
   899  0008AC  0008               	tblrd		*
   900  0008AE  50F5               	movf	tablat,w,c
   901                           
   902                           ; Switch size 1, requested type "space"
   903                           ; Number of cases is 1, Range of values is 48 to 48
   904                           ; switch strategies available:
   905                           ; Name         Instructions Cycles
   906                           ; simple_byte            4     3 (average)
   907                           ;	Chosen strategy is simple_byte
   908  0008B0  0A30               	xorlw	48	; case 48
   909  0008B2  B4D8               	btfsc	status,2,c
   910  0008B4  D7EE               	goto	l1700
   911                           
   912                           ; BSR set to: 0
   913                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
   914                           
   915                           ; BSR set to: 0
   916                           
   917                           ; BSR set to: 0
   918                           ;doprnt.c: 595: }
   919                           
   920                           ; BSR set to: 0
   921                           ;doprnt.c: 594: break;
   922  0008B6  0100               	movlb	0	; () banked
   923  0008B8  C062  FFF6         	movff	sprintf@f,tblptrl
   924  0008BC  0100               	movlb	0	; () banked
   925  0008BE  C063  FFF7         	movff	sprintf@f+1,tblptrh
   926  0008C2  0008               	tblrd		*
   927  0008C4  CFF5 F020          	movff	tablat,?_isdigit
   928  0008C8  EC3A  F008         	call	_isdigit	;wreg free
   929  0008CC  A0D8               	btfss	status,0,c
   930  0008CE  D03D               	goto	l1720
   931                           
   932                           ;doprnt.c: 607: width = 0;
   933  0008D0  0E00               	movlw	0
   934  0008D2  0100               	movlb	0	; () banked
   935  0008D4  0100               	movlb	0	; () banked
   936  0008D6  6F74               	movwf	(sprintf@width+1)& (0+255),b
   937  0008D8  0E00               	movlw	0
   938  0008DA  0100               	movlb	0	; () banked
   939  0008DC  6F73               	movwf	sprintf@width& (0+255),b
   940  0008DE                     l1710:
   941                           
   942                           ;doprnt.c: 609: width *= 10;
   943  0008DE  C073  F020         	movff	sprintf@width,?___wmul
   944  0008E2  C074  F021         	movff	sprintf@width+1,?___wmul+1
   945  0008E6  0E00               	movlw	0
   946  0008E8  6E23               	movwf	?___wmul+3,c
   947  0008EA  0E0A               	movlw	10
   948  0008EC  6E22               	movwf	?___wmul+2,c
   949  0008EE  EC02  F008         	call	___wmul	;wreg free
   950  0008F2  C020  F073         	movff	?___wmul,sprintf@width
   951  0008F6  C021  F074         	movff	?___wmul+1,sprintf@width+1
   952                           
   953                           ;doprnt.c: 610: width += *f++ - '0';
   954  0008FA  0100               	movlb	0	; () banked
   955  0008FC  C062  FFF6         	movff	sprintf@f,tblptrl
   956  000900  0100               	movlb	0	; () banked
   957  000902  C063  FFF7         	movff	sprintf@f+1,tblptrh
   958  000906  0008               	tblrd		*
   959  000908  CFF5 F02E          	movff	tablat,??_sprintf
   960  00090C  0ED0               	movlw	208
   961  00090E  242E               	addwf	??_sprintf,w,c
   962  000910  6E2F               	movwf	(??_sprintf+1)& (0+255),c
   963  000912  6A30               	clrf	(??_sprintf+2)& (0+255),c
   964  000914  0EFF               	movlw	255
   965  000916  2230               	addwfc	(??_sprintf+2)& (0+255),f,c
   966  000918  502F               	movf	??_sprintf+1,w,c
   967  00091A  0100               	movlb	0	; () banked
   968  00091C  0100               	movlb	0	; () banked
   969  00091E  2773               	addwf	sprintf@width& (0+255),f,b
   970  000920  5030               	movf	??_sprintf+2,w,c
   971  000922  0100               	movlb	0	; () banked
   972  000924  0100               	movlb	0	; () banked
   973  000926  2374               	addwfc	(sprintf@width+1)& (0+255),f,b
   974                           
   975                           ; BSR set to: 0
   976  000928  0100               	movlb	0	; () banked
   977  00092A  0100               	movlb	0	; () banked
   978  00092C  4B62               	infsnz	sprintf@f& (0+255),f,b
   979  00092E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
   980                           
   981                           ; BSR set to: 0
   982                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
   983  000930  0100               	movlb	0	; () banked
   984  000932  C062  FFF6         	movff	sprintf@f,tblptrl
   985  000936  0100               	movlb	0	; () banked
   986  000938  C063  FFF7         	movff	sprintf@f+1,tblptrh
   987  00093C  0008               	tblrd		*
   988  00093E  CFF5 F020          	movff	tablat,?_isdigit
   989  000942  EC3A  F008         	call	_isdigit	;wreg free
   990  000946  B0D8               	btfsc	status,0,c
   991  000948  D7CA               	goto	l1710
   992  00094A                     l1720:
   993  00094A  0100               	movlb	0	; () banked
   994  00094C  C062  FFF6         	movff	sprintf@f,tblptrl
   995  000950  0100               	movlb	0	; () banked
   996  000952  C063  FFF7         	movff	sprintf@f+1,tblptrh
   997  000956  0100               	movlb	0	; () banked
   998  000958  0100               	movlb	0	; () banked
   999  00095A  4B62               	infsnz	sprintf@f& (0+255),f,b
  1000  00095C  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1001  00095E  0008               	tblrd		*
  1002  000960  0100               	movlb	0	; () banked
  1003  000962  CFF5 F075          	movff	tablat,sprintf@c
  1004  000966  0100               	movlb	0	; () banked
  1005  000968  5175               	movf	sprintf@c& (0+255),w,b
  1006                           
  1007                           ; Switch size 1, requested type "space"
  1008                           ; Number of cases is 3, Range of values is 0 to 105
  1009                           ; switch strategies available:
  1010                           ; Name         Instructions Cycles
  1011                           ; simple_byte           10     6 (average)
  1012                           ;	Chosen strategy is simple_byte
  1013  00096A  0A00               	xorlw	0	; case 0
  1014  00096C  B4D8               	btfsc	status,2,c
  1015  00096E  D128               	goto	l1800
  1016  000970  0A64               	xorlw	100	; case 100
  1017  000972  B4D8               	btfsc	status,2,c
  1018  000974  D003               	goto	l1722
  1019  000976  0A0D               	xorlw	13	; case 105
  1020  000978  A4D8               	btfss	status,2,c
  1021  00097A  D111               	goto	l1798
  1022  00097C                     l1722:
  1023                           
  1024                           ;doprnt.c: 1260: {
  1025                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1026  00097C  C06A  FFD9         	movff	sprintf@ap,fsr2l
  1027  000980  C06B  FFDA         	movff	sprintf@ap+1,fsr2h
  1028  000984  0100               	movlb	0	; () banked
  1029  000986  CFDE F06D          	movff	postinc2,sprintf@_val
  1030  00098A  0100               	movlb	0	; () banked
  1031  00098C  CFDD F06E          	movff	postdec2,sprintf@_val+1
  1032                           
  1033                           ; BSR set to: 0
  1034  000990  0E02               	movlw	2
  1035  000992  0100               	movlb	0	; () banked
  1036  000994  0100               	movlb	0	; () banked
  1037  000996  276A               	addwf	sprintf@ap& (0+255),f,b
  1038  000998  0E00               	movlw	0
  1039  00099A  0100               	movlb	0	; () banked
  1040  00099C  236B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  1044  00099E  0100               	movlb	0	; () banked
  1045  0009A0  0100               	movlb	0	; () banked
  1046  0009A2  AF6E               	btfss	(sprintf@_val+1)& (0+255),7,b
  1047  0009A4  D00B               	goto	l1732
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;doprnt.c: 1269: flag |= 0x03;
  1051  0009A6  0E03               	movlw	3
  1052  0009A8  0100               	movlb	0	; () banked
  1053  0009AA  0100               	movlb	0	; () banked
  1054  0009AC  1372               	iorwf	sprintf@flag& (0+255),f,b
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;doprnt.c: 1270: _val._val = -_val._val;
  1058  0009AE  0100               	movlb	0	; () banked
  1059  0009B0  0100               	movlb	0	; () banked
  1060  0009B2  6D6D               	negf	sprintf@_val& (0+255),b
  1061  0009B4  0100               	movlb	0	; () banked
  1062  0009B6  1F6E               	comf	(sprintf@_val+1)& (0+255),f,b
  1063  0009B8  B0D8               	btfsc	status,0,c
  1064  0009BA  2B6E               	incf	(sprintf@_val+1)& (0+255),f,b
  1065  0009BC                     l1732:
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;doprnt.c: 1271: }
  1069                           ;doprnt.c: 1273: }
  1070                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1071  0009BC  6E2E               	movwf	??_sprintf& (0+255),c
  1072  0009BE  0E01               	movlw	1
  1073  0009C0  0100               	movlb	0	; () banked
  1074  0009C2  0100               	movlb	0	; () banked
  1075  0009C4  6F75               	movwf	sprintf@c& (0+255),b
  1076  0009C6  502E               	movf	??_sprintf& (0+255),w,c
  1077  0009C8                     
  1078                           ; BSR set to: 0
  1079  0009C8  0100               	movlb	0	; () banked
  1080  0009CA  0100               	movlb	0	; () banked
  1081  0009CC  5175               	movf	sprintf@c& (0+255),w,b
  1082  0009CE  0A05               	xorlw	5
  1083  0009D0  B4D8               	btfsc	status,2,c
  1084  0009D2  D01E               	goto	l1746
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  1088                           
  1089                           ; BSR set to: 0
  1090                           
  1091                           ; BSR set to: 0
  1092  0009D4  0100               	movlb	0	; () banked
  1093  0009D6  0100               	movlb	0	; () banked
  1094  0009D8  5175               	movf	sprintf@c& (0+255),w,b
  1095  0009DA  0D02               	mullw	2
  1096  0009DC  0E00               	movlw	low _dpowers
  1097  0009DE  24F3               	addwf	prodl,w,c
  1098  0009E0  6EF6               	movwf	tblptrl,c
  1099  0009E2  0E08               	movlw	high _dpowers
  1100  0009E4  20F4               	addwfc	prodh,w,c
  1101  0009E6  6EF7               	movwf	tblptrh,c
  1102  0009E8  0009               	tblrd		*+
  1103  0009EA  CFF5 F02E          	movff	tablat,??_sprintf
  1104  0009EE  0009               	tblrd		*+
  1105  0009F0  CFF5 F02F          	movff	tablat,??_sprintf+1
  1106  0009F4  502E               	movf	??_sprintf,w,c
  1107  0009F6  0100               	movlb	0	; () banked
  1108  0009F8  0100               	movlb	0	; () banked
  1109  0009FA  5D6D               	subwf	sprintf@_val& (0+255),w,b
  1110  0009FC  502F               	movf	??_sprintf+1,w,c
  1111  0009FE  0100               	movlb	0	; () banked
  1112  000A00  0100               	movlb	0	; () banked
  1113  000A02  596E               	subwfb	(sprintf@_val+1)& (0+255),w,b
  1114  000A04  A0D8               	btfss	status,0,c
  1115  000A06  D004               	goto	l1746
  1116                           
  1117                           ; BSR set to: 0
  1118                           
  1119                           ; BSR set to: 0
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;doprnt.c: 1314: break;
  1123  000A08  0100               	movlb	0	; () banked
  1124  000A0A  0100               	movlb	0	; () banked
  1125  000A0C  2B75               	incf	sprintf@c& (0+255),f,b
  1126  000A0E  D7DC               	goto	L3
  1127  000A10                     l1746:
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;doprnt.c: 1352: if(width && flag & 0x03)
  1131  000A10  0100               	movlb	0	; () banked
  1132  000A12  0100               	movlb	0	; () banked
  1133  000A14  5174               	movf	(sprintf@width+1)& (0+255),w,b
  1134  000A16  1173               	iorwf	sprintf@width& (0+255),w,b
  1135  000A18  B4D8               	btfsc	status,2,c
  1136  000A1A  D00B               	goto	l1752
  1137                           
  1138                           ; BSR set to: 0
  1139  000A1C  0100               	movlb	0	; () banked
  1140  000A1E  0100               	movlb	0	; () banked
  1141  000A20  5172               	movf	sprintf@flag& (0+255),w,b
  1142  000A22  0B03               	andlw	3
  1143  000A24  B4D8               	btfsc	status,2,c
  1144  000A26  D005               	goto	l1752
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;doprnt.c: 1353: width--;
  1148  000A28  0100               	movlb	0	; () banked
  1149  000A2A  0100               	movlb	0	; () banked
  1150  000A2C  0773               	decf	sprintf@width& (0+255),f,b
  1151  000A2E  A0D8               	btfss	status,0,c
  1152  000A30  0774               	decf	(sprintf@width+1)& (0+255),f,b
  1153  000A32                     l1752:
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;doprnt.c: 1388: if(width > c)
  1157  000A32  0E80               	movlw	128
  1158  000A34  0100               	movlb	0	; () banked
  1159  000A36  0100               	movlb	0	; () banked
  1160  000A38  BF75               	btfsc	sprintf@c& (0+255),7,b
  1161  000A3A  0E7F               	movlw	127
  1162  000A3C  6E2E               	movwf	??_sprintf& (0+255),c
  1163  000A3E  0100               	movlb	0	; () banked
  1164  000A40  0100               	movlb	0	; () banked
  1165  000A42  5173               	movf	sprintf@width& (0+255),w,b
  1166  000A44  0100               	movlb	0	; () banked
  1167  000A46  0100               	movlb	0	; () banked
  1168  000A48  5D75               	subwf	sprintf@c& (0+255),w,b
  1169  000A4A  0100               	movlb	0	; () banked
  1170  000A4C  0100               	movlb	0	; () banked
  1171  000A4E  5174               	movf	(sprintf@width+1)& (0+255),w,b
  1172  000A50  0A80               	xorlw	128
  1173  000A52  582E               	subwfb	??_sprintf& (0+255),w,c
  1174  000A54  B0D8               	btfsc	status,0,c
  1175  000A56  D00E               	goto	l1756
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;doprnt.c: 1389: width -= c;
  1179  000A58  0100               	movlb	0	; () banked
  1180  000A5A  0100               	movlb	0	; () banked
  1181  000A5C  5175               	movf	sprintf@c& (0+255),w,b
  1182  000A5E  0100               	movlb	0	; () banked
  1183  000A60  0100               	movlb	0	; () banked
  1184  000A62  5F73               	subwf	sprintf@width& (0+255),f,b
  1185  000A64  0E00               	movlw	0
  1186  000A66  0100               	movlb	0	; () banked
  1187  000A68  BF75               	btfsc	sprintf@c& (0+255),7,b
  1188  000A6A  0EFF               	movlw	255
  1189  000A6C  0100               	movlb	0	; () banked
  1190  000A6E  0100               	movlb	0	; () banked
  1191  000A70  5B74               	subwfb	(sprintf@width+1)& (0+255),f,b
  1192  000A72  D007               	goto	l1758
  1193  000A74                     l1756:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;doprnt.c: 1390: else
  1197                           ;doprnt.c: 1391: width = 0;
  1198  000A74  0E00               	movlw	0
  1199  000A76  0100               	movlb	0	; () banked
  1200  000A78  0100               	movlb	0	; () banked
  1201  000A7A  6F74               	movwf	(sprintf@width+1)& (0+255),b
  1202  000A7C  0E00               	movlw	0
  1203  000A7E  0100               	movlb	0	; () banked
  1204  000A80  6F73               	movwf	sprintf@width& (0+255),b
  1205  000A82                     l1758:
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;doprnt.c: 1394: if(flag & 0x04) {
  1209  000A82  0100               	movlb	0	; () banked
  1210  000A84  0100               	movlb	0	; () banked
  1211  000A86  A572               	btfss	sprintf@flag& (0+255),2,b
  1212  000A88  D026               	goto	l1774
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;doprnt.c: 1399: if(flag & 0x03)
  1216  000A8A  0100               	movlb	0	; () banked
  1217  000A8C  0100               	movlb	0	; () banked
  1218  000A8E  5172               	movf	sprintf@flag& (0+255),w,b
  1219  000A90  0B03               	andlw	3
  1220  000A92  B4D8               	btfsc	status,2,c
  1221  000A94  D00A               	goto	l1766
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  1225  000A96  C060  FFD9         	movff	sprintf@sp,fsr2l
  1226  000A9A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1227  000A9E  0E2D               	movlw	45
  1228  000AA0  6EDF               	movwf	indf2,c
  1229                           
  1230                           ; BSR set to: 0
  1231  000AA2  0100               	movlb	0	; () banked
  1232  000AA4  0100               	movlb	0	; () banked
  1233  000AA6  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1234  000AA8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1235  000AAA                     l1766:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;doprnt.c: 1422: if(width)
  1239  000AAA  0100               	movlb	0	; () banked
  1240  000AAC  0100               	movlb	0	; () banked
  1241  000AAE  5174               	movf	(sprintf@width+1)& (0+255),w,b
  1242  000AB0  1173               	iorwf	sprintf@width& (0+255),w,b
  1243  000AB2  B4D8               	btfsc	status,2,c
  1244  000AB4  D03A               	goto	l1788
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  1248                           
  1249                           ; BSR set to: 0
  1250                           
  1251                           ;doprnt.c: 1423: do
  1252  000AB6  C060  FFD9         	movff	sprintf@sp,fsr2l
  1253  000ABA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1254  000ABE  0E30               	movlw	48
  1255  000AC0  6EDF               	movwf	indf2,c
  1256                           
  1257                           ; BSR set to: 0
  1258  000AC2  0100               	movlb	0	; () banked
  1259  000AC4  0100               	movlb	0	; () banked
  1260  000AC6  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1261  000AC8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;doprnt.c: 1425: while(--width);
  1265  000ACA  0100               	movlb	0	; () banked
  1266  000ACC  0100               	movlb	0	; () banked
  1267  000ACE  0773               	decf	sprintf@width& (0+255),f,b
  1268  000AD0  A0D8               	btfss	status,0,c
  1269  000AD2  0774               	decf	(sprintf@width+1)& (0+255),f,b
  1270  000AD4  D7EB               	goto	L4
  1271  000AD6                     l1774:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;doprnt.c: 1429: {
  1275                           ;doprnt.c: 1431: if(width
  1276                           ;doprnt.c: 1435: )
  1277  000AD6  0100               	movlb	0	; () banked
  1278  000AD8  0100               	movlb	0	; () banked
  1279  000ADA  5174               	movf	(sprintf@width+1)& (0+255),w,b
  1280  000ADC  1173               	iorwf	sprintf@width& (0+255),w,b
  1281  000ADE  B4D8               	btfsc	status,2,c
  1282  000AE0  D014               	goto	l1782
  1283  000AE2                     l1776:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  1287  000AE2  C060  FFD9         	movff	sprintf@sp,fsr2l
  1288  000AE6  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1289  000AEA  0E20               	movlw	32
  1290  000AEC  6EDF               	movwf	indf2,c
  1291                           
  1292                           ; BSR set to: 0
  1293  000AEE  0100               	movlb	0	; () banked
  1294  000AF0  0100               	movlb	0	; () banked
  1295  000AF2  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1296  000AF4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;doprnt.c: 1438: while(--width);
  1300  000AF6  0100               	movlb	0	; () banked
  1301  000AF8  0100               	movlb	0	; () banked
  1302  000AFA  0773               	decf	sprintf@width& (0+255),f,b
  1303  000AFC  A0D8               	btfss	status,0,c
  1304  000AFE  0774               	decf	(sprintf@width+1)& (0+255),f,b
  1305  000B00  0100               	movlb	0	; () banked
  1306  000B02  5174               	movf	(sprintf@width+1)& (0+255),w,b
  1307  000B04  1173               	iorwf	sprintf@width& (0+255),w,b
  1308  000B06  A4D8               	btfss	status,2,c
  1309  000B08  D7EC               	goto	l1776
  1310  000B0A                     l1782:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;doprnt.c: 1445: if(flag & 0x03)
  1314  000B0A  0100               	movlb	0	; () banked
  1315  000B0C  0100               	movlb	0	; () banked
  1316  000B0E  5172               	movf	sprintf@flag& (0+255),w,b
  1317  000B10  0B03               	andlw	3
  1318  000B12  B4D8               	btfsc	status,2,c
  1319  000B14  D00A               	goto	l1788
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  1323  000B16  C060  FFD9         	movff	sprintf@sp,fsr2l
  1324  000B1A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1325  000B1E  0E2D               	movlw	45
  1326  000B20  6EDF               	movwf	indf2,c
  1327                           
  1328                           ; BSR set to: 0
  1329  000B22  0100               	movlb	0	; () banked
  1330  000B24  0100               	movlb	0	; () banked
  1331  000B26  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1332  000B28  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1333  000B2A                     l1788:
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;doprnt.c: 1476: }
  1337                           ;doprnt.c: 1479: prec = c;
  1338  000B2A  C075  F06C         	movff	sprintf@c,sprintf@prec
  1339                           
  1340                           ;doprnt.c: 1481: while(prec--) {
  1341  000B2E  D030               	goto	l1796
  1342  000B30                     l1790:
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;doprnt.c: 1485: {
  1346                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  1347  000B30  0100               	movlb	0	; () banked
  1348  000B32  0100               	movlb	0	; () banked
  1349  000B34  516C               	movf	sprintf@prec& (0+255),w,b
  1350  000B36  0D02               	mullw	2
  1351  000B38  0E00               	movlw	low _dpowers
  1352  000B3A  24F3               	addwf	prodl,w,c
  1353  000B3C  6EF6               	movwf	tblptrl,c
  1354  000B3E  0E08               	movlw	high _dpowers
  1355  000B40  20F4               	addwfc	prodh,w,c
  1356  000B42  6EF7               	movwf	tblptrh,c
  1357  000B44  0009               	tblrd		*+
  1358  000B46  CFF5 F022          	movff	tablat,?___lwdiv+2
  1359  000B4A  000A               	tblrd		*-
  1360  000B4C  CFF5 F023          	movff	tablat,?___lwdiv+3
  1361  000B50  C06D  F020         	movff	sprintf@_val,?___lwdiv
  1362  000B54  C06E  F021         	movff	sprintf@_val+1,?___lwdiv+1
  1363  000B58  EC70  F007         	call	___lwdiv	;wreg free
  1364  000B5C  C020  F028         	movff	?___lwdiv,?___lwmod
  1365  000B60  C021  F029         	movff	?___lwdiv+1,?___lwmod+1
  1366  000B64  0E00               	movlw	0
  1367  000B66  6E2B               	movwf	?___lwmod+3,c
  1368  000B68  0E0A               	movlw	10
  1369  000B6A  6E2A               	movwf	?___lwmod+2,c
  1370  000B6C  ECC0  F007         	call	___lwmod	;wreg free
  1371  000B70  5028               	movf	?___lwmod,w,c
  1372  000B72  0F30               	addlw	48
  1373  000B74  0100               	movlb	0	; () banked
  1374  000B76  0100               	movlb	0	; () banked
  1375  000B78  6F75               	movwf	sprintf@c& (0+255),b
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;doprnt.c: 1530: }
  1379                           ;doprnt.c: 1531: ((*sp++ = (c)));
  1380  000B7A  C060  FFD9         	movff	sprintf@sp,fsr2l
  1381  000B7E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1382  000B82  0100               	movlb	0	; () banked
  1383  000B84  C075  FFDF         	movff	sprintf@c,indf2
  1384                           
  1385                           ; BSR set to: 0
  1386  000B88  0100               	movlb	0	; () banked
  1387  000B8A  0100               	movlb	0	; () banked
  1388  000B8C  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1389  000B8E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1390  000B90                     l1796:
  1391                           
  1392                           ; BSR set to: 0
  1393  000B90  0100               	movlb	0	; () banked
  1394  000B92  0100               	movlb	0	; () banked
  1395  000B94  076C               	decf	sprintf@prec& (0+255),f,b
  1396  000B96  0100               	movlb	0	; () banked
  1397  000B98  296C               	incf	sprintf@prec& (0+255),w,b
  1398  000B9A  A4D8               	btfss	status,2,c
  1399  000B9C  D7C9               	goto	l1790
  1400  000B9E                     l1798:
  1401  000B9E  0100               	movlb	0	; () banked
  1402  000BA0  C062  FFF6         	movff	sprintf@f,tblptrl
  1403  000BA4  0100               	movlb	0	; () banked
  1404  000BA6  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1405  000BAA  0100               	movlb	0	; () banked
  1406  000BAC  0100               	movlb	0	; () banked
  1407  000BAE  4B62               	infsnz	sprintf@f& (0+255),f,b
  1408  000BB0  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1409  000BB2  0008               	tblrd		*
  1410  000BB4  0100               	movlb	0	; () banked
  1411  000BB6  CFF5 F075          	movff	tablat,sprintf@c
  1412  000BBA  0100               	movlb	0	; () banked
  1413  000BBC  6775               	tstfsz	sprintf@c& (0+255),b
  1414  000BBE  D649               	goto	l1690
  1415  000BC0                     l1800:
  1416                           
  1417                           ;doprnt.c: 1545: *sp = 0;
  1418  000BC0  C060  FFD9         	movff	sprintf@sp,fsr2l
  1419  000BC4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1420  000BC8  0E00               	movlw	0
  1421  000BCA  6EDF               	movwf	indf2,c
  1422                           
  1423                           ;doprnt.c: 1547: return 0;
  1424                           ;	Return value of _sprintf is never used
  1425  000BCC  0012               	return	
  1426  000BCE                     __end_of_sprintf:
  1427                           	opt stack 0
  1428                           tblptru	equ	0xFF8
  1429                           tblptrh	equ	0xFF7
  1430                           tblptrl	equ	0xFF6
  1431                           tablat	equ	0xFF5
  1432                           prodh	equ	0xFF4
  1433                           prodl	equ	0xFF3
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postinc1	equ	0xFE6
  1437                           postdec1	equ	0xFE5
  1438                           fsr1l	equ	0xFE1
  1439                           indf2	equ	0xFDF
  1440                           postinc2	equ	0xFDE
  1441                           postdec2	equ	0xFDD
  1442                           fsr2h	equ	0xFDA
  1443                           fsr2l	equ	0xFD9
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function ___wmul *****************
  1447 ;; Defined at:
  1448 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  multiplier      2   31[COMRAM] unsigned int 
  1451 ;;  multiplicand    2   33[COMRAM] unsigned int 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  product         2   35[COMRAM] unsigned int 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  2   31[COMRAM] unsigned int 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, prodl, prodh
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1463 ;;      Params:         4       0       0       0       0       0       0       0       0
  1464 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1466 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1467 ;;Total ram usage:        6 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    2
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_sprintf
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           	psect	text2
  1478  001004                     __ptext2:
  1479                           	opt stack 0
  1480  001004                     ___wmul:
  1481                           	opt stack 27
  1482                           
  1483                           ;incstack = 0
  1484                           ;incstack = 0
  1485  001004  5020               	movf	___wmul@multiplier,w,c
  1486  001006  0222               	mulwf	___wmul@multiplicand,c
  1487  001008  CFF3 F024          	movff	prodl,___wmul@product
  1488  00100C  CFF4 F025          	movff	prodh,___wmul@product+1
  1489  001010  5020               	movf	___wmul@multiplier,w,c
  1490  001012  0223               	mulwf	___wmul@multiplicand+1,c
  1491  001014  CFF3 FFF4          	movff	prodl,prodh
  1492  001018  6AF3               	clrf	prodl,c
  1493  00101A  50F3               	movf	prodl,w,c
  1494  00101C  2624               	addwf	___wmul@product,f,c
  1495  00101E  50F4               	movf	prodh,w,c
  1496  001020  2225               	addwfc	___wmul@product+1,f,c
  1497  001022  5021               	movf	___wmul@multiplier+1,w,c
  1498  001024  0222               	mulwf	___wmul@multiplicand,c
  1499  001026  CFF3 FFF4          	movff	prodl,prodh
  1500  00102A  6AF3               	clrf	prodl,c
  1501  00102C  50F3               	movf	prodl,w,c
  1502  00102E  2624               	addwf	___wmul@product,f,c
  1503  001030  50F4               	movf	prodh,w,c
  1504  001032  2225               	addwfc	___wmul@product+1,f,c
  1505  001034  C024  F020         	movff	___wmul@product,?___wmul
  1506  001038  C025  F021         	movff	___wmul@product+1,?___wmul+1
  1507  00103C  0012               	return	
  1508  00103E                     __end_of___wmul:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postinc1	equ	0xFE6
  1519                           postdec1	equ	0xFE5
  1520                           fsr1l	equ	0xFE1
  1521                           indf2	equ	0xFDF
  1522                           postinc2	equ	0xFDE
  1523                           postdec2	equ	0xFDD
  1524                           fsr2h	equ	0xFDA
  1525                           fsr2l	equ	0xFD9
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function ___lwmod *****************
  1529 ;; Defined at:
  1530 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  dividend        2   39[COMRAM] unsigned int 
  1533 ;;  divisor         2   41[COMRAM] unsigned int 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  counter         1   44[COMRAM] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  2   39[COMRAM] unsigned int 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         4       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1547 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        6 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    2
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_sprintf
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text3
  1560  000F80                     __ptext3:
  1561                           	opt stack 0
  1562  000F80                     ___lwmod:
  1563                           	opt stack 27
  1564                           
  1565                           ;incstack = 0
  1566                           ;incstack = 0
  1567  000F80  502B               	movf	___lwmod@divisor+1,w,c
  1568  000F82  102A               	iorwf	___lwmod@divisor,w,c
  1569  000F84  B4D8               	btfsc	status,2,c
  1570  000F86  D01A               	goto	l786
  1571  000F88  6E2C               	movwf	??___lwmod& (0+255),c
  1572  000F8A  0E01               	movlw	1
  1573  000F8C  6E2D               	movwf	___lwmod@counter,c
  1574  000F8E  502C               	movf	??___lwmod& (0+255),w,c
  1575  000F90  D004               	goto	l1606
  1576  000F92                     l1604:
  1577  000F92  90D8               	bcf	status,0,c
  1578  000F94  362A               	rlcf	___lwmod@divisor,f,c
  1579  000F96  362B               	rlcf	___lwmod@divisor+1,f,c
  1580  000F98  2A2D               	incf	___lwmod@counter,f,c
  1581  000F9A                     l1606:
  1582  000F9A  AE2B               	btfss	___lwmod@divisor+1,7,c
  1583  000F9C  D7FA               	goto	l1604
  1584  000F9E                     l1608:
  1585  000F9E  502A               	movf	___lwmod@divisor,w,c
  1586  000FA0  5C28               	subwf	___lwmod@dividend,w,c
  1587  000FA2  502B               	movf	___lwmod@divisor+1,w,c
  1588  000FA4  5829               	subwfb	___lwmod@dividend+1,w,c
  1589  000FA6  A0D8               	btfss	status,0,c
  1590  000FA8  D004               	goto	l1612
  1591  000FAA  502A               	movf	___lwmod@divisor,w,c
  1592  000FAC  5E28               	subwf	___lwmod@dividend,f,c
  1593  000FAE  502B               	movf	___lwmod@divisor+1,w,c
  1594  000FB0  5A29               	subwfb	___lwmod@dividend+1,f,c
  1595  000FB2                     l1612:
  1596  000FB2  90D8               	bcf	status,0,c
  1597  000FB4  322B               	rrcf	___lwmod@divisor+1,f,c
  1598  000FB6  322A               	rrcf	___lwmod@divisor,f,c
  1599  000FB8  2E2D               	decfsz	___lwmod@counter,f,c
  1600  000FBA  D7F1               	goto	l1608
  1601  000FBC                     l786:
  1602  000FBC  C028  F028         	movff	___lwmod@dividend,?___lwmod
  1603  000FC0  C029  F029         	movff	___lwmod@dividend+1,?___lwmod+1
  1604  000FC4  0012               	return	
  1605  000FC6                     __end_of___lwmod:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           prodh	equ	0xFF4
  1612                           prodl	equ	0xFF3
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postinc1	equ	0xFE6
  1616                           postdec1	equ	0xFE5
  1617                           fsr1l	equ	0xFE1
  1618                           indf2	equ	0xFDF
  1619                           postinc2	equ	0xFDE
  1620                           postdec2	equ	0xFDD
  1621                           fsr2h	equ	0xFDA
  1622                           fsr2l	equ	0xFD9
  1623                           status	equ	0xFD8
  1624                           
  1625 ;; *************** function ___lwdiv *****************
  1626 ;; Defined at:
  1627 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  dividend        2   31[COMRAM] unsigned int 
  1630 ;;  divisor         2   33[COMRAM] unsigned int 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  quotient        2   36[COMRAM] unsigned int 
  1633 ;;  counter         1   38[COMRAM] unsigned char 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  2   31[COMRAM] unsigned int 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1643 ;;      Params:         4       0       0       0       0       0       0       0       0
  1644 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1645 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1646 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1647 ;;Total ram usage:        8 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    2
  1650 ;; This function calls:
  1651 ;;		Nothing
  1652 ;; This function is called by:
  1653 ;;		_sprintf
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text4
  1658  000EE0                     __ptext4:
  1659                           	opt stack 0
  1660  000EE0                     ___lwdiv:
  1661                           	opt stack 27
  1662                           
  1663                           ;incstack = 0
  1664                           ;incstack = 0
  1665  000EE0  0E00               	movlw	0
  1666  000EE2  6E26               	movwf	___lwdiv@quotient+1,c
  1667  000EE4  0E00               	movlw	0
  1668  000EE6  6E25               	movwf	___lwdiv@quotient,c
  1669  000EE8  5023               	movf	___lwdiv@divisor+1,w,c
  1670  000EEA  1022               	iorwf	___lwdiv@divisor,w,c
  1671  000EEC  B4D8               	btfsc	status,2,c
  1672  000EEE  D01E               	goto	l776
  1673  000EF0  6E24               	movwf	??___lwdiv& (0+255),c
  1674  000EF2  0E01               	movlw	1
  1675  000EF4  6E27               	movwf	___lwdiv@counter,c
  1676  000EF6  5024               	movf	??___lwdiv& (0+255),w,c
  1677  000EF8  D004               	goto	l1586
  1678  000EFA                     l1584:
  1679  000EFA  90D8               	bcf	status,0,c
  1680  000EFC  3622               	rlcf	___lwdiv@divisor,f,c
  1681  000EFE  3623               	rlcf	___lwdiv@divisor+1,f,c
  1682  000F00  2A27               	incf	___lwdiv@counter,f,c
  1683  000F02                     l1586:
  1684  000F02  AE23               	btfss	___lwdiv@divisor+1,7,c
  1685  000F04  D7FA               	goto	l1584
  1686  000F06                     l1588:
  1687  000F06  90D8               	bcf	status,0,c
  1688  000F08  3625               	rlcf	___lwdiv@quotient,f,c
  1689  000F0A  3626               	rlcf	___lwdiv@quotient+1,f,c
  1690  000F0C  5022               	movf	___lwdiv@divisor,w,c
  1691  000F0E  5C20               	subwf	___lwdiv@dividend,w,c
  1692  000F10  5023               	movf	___lwdiv@divisor+1,w,c
  1693  000F12  5821               	subwfb	___lwdiv@dividend+1,w,c
  1694  000F14  A0D8               	btfss	status,0,c
  1695  000F16  D005               	goto	l1596
  1696  000F18  5022               	movf	___lwdiv@divisor,w,c
  1697  000F1A  5E20               	subwf	___lwdiv@dividend,f,c
  1698  000F1C  5023               	movf	___lwdiv@divisor+1,w,c
  1699  000F1E  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1700  000F20  8025               	bsf	___lwdiv@quotient,0,c
  1701  000F22                     l1596:
  1702  000F22  90D8               	bcf	status,0,c
  1703  000F24  3223               	rrcf	___lwdiv@divisor+1,f,c
  1704  000F26  3222               	rrcf	___lwdiv@divisor,f,c
  1705  000F28  2E27               	decfsz	___lwdiv@counter,f,c
  1706  000F2A  D7ED               	goto	l1588
  1707  000F2C                     l776:
  1708  000F2C  C025  F020         	movff	___lwdiv@quotient,?___lwdiv
  1709  000F30  C026  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1710  000F34  0012               	return	
  1711  000F36                     __end_of___lwdiv:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           postinc1	equ	0xFE6
  1722                           postdec1	equ	0xFE5
  1723                           fsr1l	equ	0xFE1
  1724                           indf2	equ	0xFDF
  1725                           postinc2	equ	0xFDE
  1726                           postdec2	equ	0xFDD
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _isdigit *****************
  1732 ;; Defined at:
  1733 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  c               1   31[COMRAM] unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;		None               void
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1747 ;;      Params:         1       0       0       0       0       0       0       0       0
  1748 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1749 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1750 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1751 ;;Total ram usage:        3 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    2
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_sprintf
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text5
  1762  001074                     __ptext5:
  1763                           	opt stack 0
  1764  001074                     _isdigit:
  1765                           	opt stack 27
  1766                           
  1767                           ;incstack = 0
  1768                           ;incstack = 0
  1769  001074  6E21               	movwf	??_isdigit& (0+255),c
  1770  001076  0E00               	movlw	0
  1771  001078  6E22               	movwf	_isdigit$1286,c
  1772  00107A  5021               	movf	??_isdigit& (0+255),w,c
  1773  00107C  0E3A               	movlw	58
  1774  00107E  6020               	cpfslt	isdigit@c,c
  1775  001080  D007               	goto	l1574
  1776  001082  0E2F               	movlw	47
  1777  001084  6420               	cpfsgt	isdigit@c,c
  1778  001086  D004               	goto	l1574
  1779  001088  6E21               	movwf	??_isdigit& (0+255),c
  1780  00108A  0E01               	movlw	1
  1781  00108C  6E22               	movwf	_isdigit$1286,c
  1782  00108E  5021               	movf	??_isdigit& (0+255),w,c
  1783  001090                     l1574:
  1784  001090  C022  F021         	movff	_isdigit$1286,??_isdigit
  1785  001094  3021               	rrcf	??_isdigit,w,c
  1786  001096  0012               	return	
  1787  001098                     __end_of_isdigit:
  1788                           	opt stack 0
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           postinc1	equ	0xFE6
  1798                           postdec1	equ	0xFE5
  1799                           fsr1l	equ	0xFE1
  1800                           indf2	equ	0xFDF
  1801                           postinc2	equ	0xFDE
  1802                           postdec2	equ	0xFDD
  1803                           fsr2h	equ	0xFDA
  1804                           fsr2l	equ	0xFD9
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _readTCN75 *****************
  1808 ;; Defined at:
  1809 ;;		line 92 in file "main.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  addr            1   32[COMRAM] const unsigned char 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  tmpHi           1   35[COMRAM] unsigned char 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  2   32[COMRAM] short 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1823 ;;      Params:         2       0       0       0       0       0       0       0       0
  1824 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1825 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1826 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1827 ;;Total ram usage:        4 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    4
  1830 ;; This function calls:
  1831 ;;		_IdleI2C
  1832 ;;		_WriteI2C
  1833 ;;		_ReadI2C
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text6
  1840  000E1C                     __ptext6:
  1841                           	opt stack 0
  1842  000E1C                     _readTCN75:
  1843                           	opt stack 26
  1844                           
  1845                           ;main.c: 94: IdleI2C();
  1846                           
  1847                           ;incstack = 0
  1848                           ;incstack = 0
  1849  000E1C  EC98  F008         	call	_IdleI2C	;wreg free
  1850                           
  1851                           ;main.c: 95: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1852  000E20  80C5               	bsf	4037,0,c	;volatile
  1853  000E22                     l69:
  1854  000E22  B0C5               	btfsc	4037,0,c	;volatile
  1855  000E24  D7FE               	goto	l69
  1856                           
  1857                           ;main.c: 96: IdleI2C();
  1858  000E26  EC98  F008         	call	_IdleI2C	;wreg free
  1859                           
  1860                           ;main.c: 97: WriteI2C( 0b10010000 | (addr << 1) );
  1861  000E2A  5021               	movf	readTCN75@addr,w,c
  1862  000E2C  2421               	addwf	readTCN75@addr,w,c
  1863  000E2E  0990               	iorlw	144
  1864  000E30  6E20               	movwf	?_WriteI2C,c
  1865  000E32  EC9B  F007         	call	_WriteI2C	;wreg free
  1866                           
  1867                           ;main.c: 98: IdleI2C();
  1868  000E36  EC98  F008         	call	_IdleI2C	;wreg free
  1869                           
  1870                           ;main.c: 99: WriteI2C( 1 );
  1871  000E3A  6E23               	movwf	??_readTCN75& (0+255),c
  1872  000E3C  0E01               	movlw	1
  1873  000E3E  6E20               	movwf	?_WriteI2C,c
  1874  000E40  5023               	movf	??_readTCN75& (0+255),w,c
  1875  000E42  EC9B  F007         	call	_WriteI2C	;wreg free
  1876                           
  1877                           ;main.c: 100: IdleI2C();
  1878  000E46  EC98  F008         	call	_IdleI2C	;wreg free
  1879                           
  1880                           ;main.c: 102: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  1881  000E4A  82C5               	bsf	4037,1,c	;volatile
  1882  000E4C                     l72:
  1883  000E4C  B2C5               	btfsc	4037,1,c	;volatile
  1884  000E4E  D7FE               	goto	l72
  1885                           
  1886                           ;main.c: 103: IdleI2C();
  1887  000E50  EC98  F008         	call	_IdleI2C	;wreg free
  1888                           
  1889                           ;main.c: 104: WriteI2C( 0b10010001 | (addr << 1) );
  1890  000E54  5021               	movf	readTCN75@addr,w,c
  1891  000E56  2421               	addwf	readTCN75@addr,w,c
  1892  000E58  0991               	iorlw	145
  1893  000E5A  6E20               	movwf	?_WriteI2C,c
  1894  000E5C  EC9B  F007         	call	_WriteI2C	;wreg free
  1895                           
  1896                           ;main.c: 105: IdleI2C();
  1897  000E60  EC98  F008         	call	_IdleI2C	;wreg free
  1898                           
  1899                           ;main.c: 106: char tmpHi = ReadI2C();
  1900  000E64  EC5E  F008         	call	_ReadI2C	;wreg free
  1901  000E68  6E24               	movwf	readTCN75@tmpHi,c
  1902                           
  1903                           ;main.c: 109: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  1904  000E6A  8AC5               	bsf	4037,5,c	;volatile
  1905  000E6C  88C5               	bsf	4037,4,c	;volatile
  1906  000E6E                     l75:
  1907  000E6E  B8C5               	btfsc	4037,4,c	;volatile
  1908  000E70  D7FE               	goto	l75
  1909                           
  1910                           ;main.c: 110: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1911  000E72  84C5               	bsf	4037,2,c	;volatile
  1912  000E74                     l78:
  1913  000E74  B4C5               	btfsc	4037,2,c	;volatile
  1914  000E76  D7FE               	goto	l78
  1915                           
  1916                           ;main.c: 112: return tmpHi;
  1917  000E78  C024  F021         	movff	readTCN75@tmpHi,?_readTCN75
  1918  000E7C  6A22               	clrf	?_readTCN75+1,c
  1919  000E7E  0012               	return	
  1920  000E80                     __end_of_readTCN75:
  1921                           	opt stack 0
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           prodh	equ	0xFF4
  1927                           prodl	equ	0xFF3
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           postinc1	equ	0xFE6
  1931                           postdec1	equ	0xFE5
  1932                           fsr1l	equ	0xFE1
  1933                           indf2	equ	0xFDF
  1934                           postinc2	equ	0xFDE
  1935                           postdec2	equ	0xFDD
  1936                           fsr2h	equ	0xFDA
  1937                           fsr2l	equ	0xFD9
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function _ReadI2C *****************
  1941 ;; Defined at:
  1942 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_read.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      unsigned char 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1956 ;;      Params:         0       0       0       0       0       0       0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1959 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1960 ;;Total ram usage:        0 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    2
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_readTCN75
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text7
  1971  0010BC                     __ptext7:
  1972                           	opt stack 0
  1973  0010BC                     _ReadI2C:
  1974                           	opt stack 27
  1975                           
  1976                           ;incstack = 0
  1977                           ;incstack = 0
  1978  0010BC  50C6               	movf	4038,w,c	;volatile
  1979  0010BE  0B0F               	andlw	15
  1980  0010C0  0A08               	xorlw	8
  1981  0010C2  B4D8               	btfsc	status,2,c
  1982  0010C4  D004               	goto	l227
  1983  0010C6  50C6               	movf	4038,w,c	;volatile
  1984  0010C8  0B0F               	andlw	15
  1985  0010CA  0A0B               	xorlw	11
  1986  0010CC  B4D8               	btfsc	status,2,c
  1987  0010CE                     l227:
  1988  0010CE  86C5               	bsf	4037,3,c	;volatile
  1989  0010D0                     l228:
  1990  0010D0  A0C7               	btfss	4039,0,c	;volatile
  1991  0010D2  D7FE               	goto	l228
  1992  0010D4  50C9               	movf	4041,w,c	;volatile
  1993  0010D6  0012               	return	
  1994  0010D8                     __end_of_ReadI2C:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           prodh	equ	0xFF4
  2001                           prodl	equ	0xFF3
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           postinc1	equ	0xFE6
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _printStringLcd *****************
  2015 ;; Defined at:
  2016 ;;		line 87 in file "midas_i2c_lcd.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  ucStr           2   35[COMRAM] PTR const unsigned char 
  2019 ;;		 -> main@str(33), STR_1(27), 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;		None               void
  2024 ;; Registers used:
  2025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2031 ;;      Params:         2       0       0       0       0       0       0       0       0
  2032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2033 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2034 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2035 ;;Total ram usage:        4 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    5
  2038 ;; This function calls:
  2039 ;;		_write_cmd
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text8
  2046  000D24                     __ptext8:
  2047                           	opt stack 0
  2048  000D24                     _printStringLcd:
  2049                           	opt stack 25
  2050                           
  2051                           ;midas_i2c_lcd.c: 89: while(*ucStr != '\0')
  2052                           
  2053                           ;incstack = 0
  2054                           ;incstack = 0
  2055  000D24  D033               	goto	l1368
  2056  000D26                     l1360:
  2057                           
  2058                           ;midas_i2c_lcd.c: 90: {
  2059                           ;midas_i2c_lcd.c: 91: if(*ucStr == '\n')
  2060  000D26  5024               	movf	printStringLcd@ucStr,w,c
  2061  000D28  6EF6               	movwf	tblptrl,c
  2062  000D2A  6EE9               	movwf	fsr0l,c
  2063  000D2C  0E07               	movlw	(high __ramtop+-1)
  2064  000D2E  6EEA               	movwf	fsr0h,c
  2065  000D30  5025               	movf	printStringLcd@ucStr+1,w,c
  2066  000D32  64EA               	cpfsgt	fsr0h,c
  2067  000D34  D003               	bra	u757
  2068  000D36  6EEA               	movwf	fsr0h,c
  2069  000D38  50EF               	movf	indf0,w,c
  2070  000D3A  D003               	bra	u750
  2071  000D3C                     u757:
  2072  000D3C  6EF7               	movwf	tblptrh,c
  2073  000D3E  0008               	tblrd		*
  2074  000D40  50F5               	movf	tablat,w,c
  2075  000D42                     u750:
  2076  000D42  0A0A               	xorlw	10
  2077  000D44  A4D8               	btfss	status,2,c
  2078  000D46  D00B               	goto	l1364
  2079                           
  2080                           ;midas_i2c_lcd.c: 92: {
  2081                           ;midas_i2c_lcd.c: 94: write_cmd(0x00UL, (0x80 | (0x40 & 0x7F)));
  2082  000D48  6E26               	movwf	??_printStringLcd& (0+255),c
  2083  000D4A  0E00               	movlw	0
  2084  000D4C  6E21               	movwf	?_write_cmd,c
  2085  000D4E  5026               	movf	??_printStringLcd& (0+255),w,c
  2086  000D50  6E27               	movwf	(??_printStringLcd+1)& (0+255),c
  2087  000D52  0EC0               	movlw	192
  2088  000D54  6E22               	movwf	?_write_cmd+1,c
  2089  000D56  5027               	movf	(??_printStringLcd+1)& (0+255),w,c
  2090  000D58  ECE3  F007         	call	_write_cmd	;wreg free
  2091                           
  2092                           ;midas_i2c_lcd.c: 95: }
  2093  000D5C  D015               	goto	l1366
  2094  000D5E                     l1364:
  2095                           
  2096                           ;midas_i2c_lcd.c: 96: else
  2097                           ;midas_i2c_lcd.c: 97: {
  2098                           ;midas_i2c_lcd.c: 99: write_cmd(0x40UL, *ucStr);
  2099  000D5E  6E26               	movwf	??_printStringLcd& (0+255),c
  2100  000D60  0E40               	movlw	64
  2101  000D62  6E21               	movwf	?_write_cmd,c
  2102  000D64  5026               	movf	??_printStringLcd& (0+255),w,c
  2103  000D66  5024               	movf	printStringLcd@ucStr,w,c
  2104  000D68  6EF6               	movwf	tblptrl,c
  2105  000D6A  6EE9               	movwf	fsr0l,c
  2106  000D6C  0E07               	movlw	(high __ramtop+-1)
  2107  000D6E  6EEA               	movwf	fsr0h,c
  2108  000D70  5025               	movf	printStringLcd@ucStr+1,w,c
  2109  000D72  64EA               	cpfsgt	fsr0h,c
  2110  000D74  D003               	bra	u777
  2111  000D76  6EEA               	movwf	fsr0h,c
  2112  000D78  50EF               	movf	indf0,w,c
  2113  000D7A  D003               	bra	u770
  2114  000D7C                     u777:
  2115  000D7C  6EF7               	movwf	tblptrh,c
  2116  000D7E  0008               	tblrd		*
  2117  000D80  50F5               	movf	tablat,w,c
  2118  000D82                     u770:
  2119  000D82  6E22               	movwf	?_write_cmd+1,c
  2120  000D84  ECE3  F007         	call	_write_cmd	;wreg free
  2121  000D88                     l1366:
  2122                           
  2123                           ;midas_i2c_lcd.c: 100: }
  2124                           ;midas_i2c_lcd.c: 101: ucStr++;
  2125  000D88  4A24               	infsnz	printStringLcd@ucStr,f,c
  2126  000D8A  2A25               	incf	printStringLcd@ucStr+1,f,c
  2127  000D8C                     l1368:
  2128  000D8C  5024               	movf	printStringLcd@ucStr,w,c
  2129  000D8E  6EF6               	movwf	tblptrl,c
  2130  000D90  6EE9               	movwf	fsr0l,c
  2131  000D92  0E07               	movlw	(high __ramtop+-1)
  2132  000D94  6EEA               	movwf	fsr0h,c
  2133  000D96  5025               	movf	printStringLcd@ucStr+1,w,c
  2134  000D98  64EA               	cpfsgt	fsr0h,c
  2135  000D9A  D003               	bra	u787
  2136  000D9C  6EEA               	movwf	fsr0h,c
  2137  000D9E  50EF               	movf	indf0,w,c
  2138  000DA0  D003               	bra	u780
  2139  000DA2                     u787:
  2140  000DA2  6EF7               	movwf	tblptrh,c
  2141  000DA4  0008               	tblrd		*
  2142  000DA6  50F5               	movf	tablat,w,c
  2143  000DA8                     u780:
  2144  000DA8  0900               	iorlw	0
  2145  000DAA  B4D8               	btfsc	status,2,c
  2146  000DAC  0012               	return	
  2147  000DAE  D7BB               	goto	l1360
  2148  000DB0                     __end_of_printStringLcd:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           indf0	equ	0xFEF
  2157                           postinc0	equ	0xFEE
  2158                           fsr0h	equ	0xFEA
  2159                           fsr0l	equ	0xFE9
  2160                           wreg	equ	0xFE8
  2161                           postinc1	equ	0xFE6
  2162                           postdec1	equ	0xFE5
  2163                           fsr1l	equ	0xFE1
  2164                           indf2	equ	0xFDF
  2165                           postinc2	equ	0xFDE
  2166                           postdec2	equ	0xFDD
  2167                           fsr2h	equ	0xFDA
  2168                           fsr2l	equ	0xFD9
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function _clearLcd *****************
  2172 ;; Defined at:
  2173 ;;		line 82 in file "midas_i2c_lcd.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;		None               void
  2180 ;; Registers used:
  2181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2187 ;;      Params:         0       0       0       0       0       0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2189 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2190 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2191 ;;Total ram usage:        2 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    5
  2194 ;; This function calls:
  2195 ;;		_write_cmd
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text9
  2202  0010F4                     __ptext9:
  2203                           	opt stack 0
  2204  0010F4                     _clearLcd:
  2205                           	opt stack 25
  2206                           
  2207                           ;midas_i2c_lcd.c: 83: write_cmd(0x00UL, 0x01);
  2208                           
  2209                           ;incstack = 0
  2210                           ;incstack = 0
  2211  0010F4  6E24               	movwf	??_clearLcd& (0+255),c
  2212  0010F6  0E00               	movlw	0
  2213  0010F8  6E21               	movwf	?_write_cmd,c
  2214  0010FA  5024               	movf	??_clearLcd& (0+255),w,c
  2215  0010FC  6E25               	movwf	(??_clearLcd+1)& (0+255),c
  2216  0010FE  0E01               	movlw	1
  2217  001100  6E22               	movwf	?_write_cmd+1,c
  2218  001102  5025               	movf	(??_clearLcd+1)& (0+255),w,c
  2219  001104  ECE3  F007         	call	_write_cmd	;wreg free
  2220  001108  0012               	return	
  2221  00110A                     __end_of_clearLcd:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           indf0	equ	0xFEF
  2230                           postinc0	equ	0xFEE
  2231                           fsr0h	equ	0xFEA
  2232                           fsr0l	equ	0xFE9
  2233                           wreg	equ	0xFE8
  2234                           postinc1	equ	0xFE6
  2235                           postdec1	equ	0xFE5
  2236                           fsr1l	equ	0xFE1
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           fsr2h	equ	0xFDA
  2241                           fsr2l	equ	0xFD9
  2242                           status	equ	0xFD8
  2243                           
  2244 ;; *************** function _initLcd *****************
  2245 ;; Defined at:
  2246 ;;		line 66 in file "midas_i2c_lcd.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  ulOptions       4   35[COMRAM] unsigned long 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  i               2   42[COMRAM] int 
  2251 ;;  ucInitSequen    2   40[COMRAM] PTR unsigned char 
  2252 ;;		 -> uc3V3SupplyInitSequence(8), uc5VSupplyInitSequence(8), 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;		None               void
  2255 ;; Registers used:
  2256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2262 ;;      Params:         4       0       0       0       0       0       0       0       0
  2263 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2264 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2265 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2266 ;;Total ram usage:        9 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    5
  2269 ;; This function calls:
  2270 ;;		_write_cmd
  2271 ;;		_initI2C
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text10
  2278  000E80                     __ptext10:
  2279                           	opt stack 0
  2280  000E80                     _initLcd:
  2281                           	opt stack 25
  2282                           
  2283                           ;midas_i2c_lcd.c: 67: unsigned char* ucInitSequence;
  2284                           ;midas_i2c_lcd.c: 68: int i = 0;
  2285                           
  2286                           ;incstack = 0
  2287                           ;incstack = 0
  2288  000E80  0E00               	movlw	0
  2289  000E82  6E2C               	movwf	initLcd@i+1,c
  2290  000E84  0E00               	movlw	0
  2291  000E86  6E2B               	movwf	initLcd@i,c
  2292                           
  2293                           ;midas_i2c_lcd.c: 70: initI2C();
  2294  000E88  EC85  F008         	call	_initI2C	;wreg free
  2295                           
  2296                           ;midas_i2c_lcd.c: 72: if (ulOptions == 0x00UL)
  2297  000E8C  5027               	movf	initLcd@ulOptions+3,w,c
  2298  000E8E  1024               	iorwf	initLcd@ulOptions,w,c
  2299  000E90  1025               	iorwf	initLcd@ulOptions+1,w,c
  2300  000E92  1026               	iorwf	initLcd@ulOptions+2,w,c
  2301  000E94  A4D8               	btfss	status,2,c
  2302  000E96  D004               	goto	l1344
  2303                           
  2304                           ;midas_i2c_lcd.c: 73: ucInitSequence = uc5VSupplyInitSequence;
  2305  000E98  0E00               	movlw	high _uc5VSupplyInitSequence
  2306  000E9A  6E2A               	movwf	initLcd@ucInitSequence+1,c
  2307  000E9C  0E39               	movlw	low _uc5VSupplyInitSequence
  2308  000E9E  D003               	goto	L5
  2309  000EA0                     l1344:
  2310                           
  2311                           ;midas_i2c_lcd.c: 74: else
  2312                           ;midas_i2c_lcd.c: 75: ucInitSequence = uc3V3SupplyInitSequence;
  2313  000EA0  0E00               	movlw	high _uc3V3SupplyInitSequence
  2314  000EA2  6E2A               	movwf	initLcd@ucInitSequence+1,c
  2315  000EA4  0E31               	movlw	low _uc3V3SupplyInitSequence
  2316  000EA6                     L5:
  2317  000EA6  6E29               	movwf	initLcd@ucInitSequence,c
  2318                           
  2319                           ;midas_i2c_lcd.c: 77: for (i = 0; i < 8UL; i++)
  2320  000EA8  0E00               	movlw	0
  2321  000EAA  6E2C               	movwf	initLcd@i+1,c
  2322  000EAC  0E00               	movlw	0
  2323  000EAE  6E2B               	movwf	initLcd@i,c
  2324  000EB0  0E08               	movlw	8
  2325  000EB2  5C2B               	subwf	initLcd@i,w,c
  2326  000EB4  0E00               	movlw	0
  2327  000EB6  582C               	subwfb	initLcd@i+1,w,c
  2328  000EB8  B0D8               	btfsc	status,0,c
  2329  000EBA  D011               	goto	l131
  2330                           
  2331                           ;midas_i2c_lcd.c: 78: write_cmd(0x00UL, ucInitSequence[i]);
  2332  000EBC  6E28               	movwf	??_initLcd& (0+255),c
  2333  000EBE  0E00               	movlw	0
  2334  000EC0  6E21               	movwf	?_write_cmd,c
  2335  000EC2  5028               	movf	??_initLcd& (0+255),w,c
  2336  000EC4  502B               	movf	initLcd@i,w,c
  2337  000EC6  2429               	addwf	initLcd@ucInitSequence,w,c
  2338  000EC8  6ED9               	movwf	fsr2l,c
  2339  000ECA  502C               	movf	initLcd@i+1,w,c
  2340  000ECC  202A               	addwfc	initLcd@ucInitSequence+1,w,c
  2341  000ECE  6EDA               	movwf	fsr2h,c
  2342  000ED0  50DF               	movf	indf2,w,c
  2343  000ED2  6E22               	movwf	?_write_cmd+1,c
  2344  000ED4  ECE3  F007         	call	_write_cmd	;wreg free
  2345  000ED8  4A2B               	infsnz	initLcd@i,f,c
  2346  000EDA  2A2C               	incf	initLcd@i+1,f,c
  2347  000EDC  D7E9               	goto	L6
  2348  000EDE                     l131:
  2349  000EDE  0012               	return	
  2350  000EE0                     __end_of_initLcd:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           indf0	equ	0xFEF
  2359                           postinc0	equ	0xFEE
  2360                           fsr0h	equ	0xFEA
  2361                           fsr0l	equ	0xFE9
  2362                           wreg	equ	0xFE8
  2363                           postinc1	equ	0xFE6
  2364                           postdec1	equ	0xFE5
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _initI2C *****************
  2374 ;; Defined at:
  2375 ;;		line 55 in file "midas_i2c_lcd.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0
  2390 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2391 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2392 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2393 ;;Total ram usage:        2 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    3
  2396 ;; This function calls:
  2397 ;;		_OpenI2C
  2398 ;; This function is called by:
  2399 ;;		_initLcd
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text11
  2404  00110A                     __ptext11:
  2405                           	opt stack 0
  2406  00110A                     _initI2C:
  2407                           	opt stack 26
  2408                           
  2409                           ;midas_i2c_lcd.c: 56: OpenI2C(0b00001000, 0b00000000);
  2410                           
  2411                           ;incstack = 0
  2412                           ;incstack = 0
  2413  00110A  6E22               	movwf	??_initI2C& (0+255),c
  2414  00110C  0E08               	movlw	8
  2415  00110E  6E20               	movwf	?_OpenI2C,c
  2416  001110  5022               	movf	??_initI2C& (0+255),w,c
  2417  001112  6E23               	movwf	(??_initI2C+1)& (0+255),c
  2418  001114  0E00               	movlw	0
  2419  001116  6E21               	movwf	?_OpenI2C+1,c
  2420  001118  5023               	movf	(??_initI2C+1)& (0+255),w,c
  2421  00111A  EC6C  F008         	call	_OpenI2C	;wreg free
  2422  00111E  0012               	return	
  2423  001120                     __end_of_initI2C:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           prodh	equ	0xFF4
  2430                           prodl	equ	0xFF3
  2431                           indf0	equ	0xFEF
  2432                           postinc0	equ	0xFEE
  2433                           fsr0h	equ	0xFEA
  2434                           fsr0l	equ	0xFE9
  2435                           wreg	equ	0xFE8
  2436                           postinc1	equ	0xFE6
  2437                           postdec1	equ	0xFE5
  2438                           fsr1l	equ	0xFE1
  2439                           indf2	equ	0xFDF
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _OpenI2C *****************
  2447 ;; Defined at:
  2448 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_open.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  sync_mode       1   31[COMRAM] unsigned char 
  2451 ;;  slew            1   32[COMRAM] unsigned char 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;		None
  2454 ;; Return value:  Size  Location     Type
  2455 ;;		None               void
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2463 ;;      Params:         2       0       0       0       0       0       0       0       0
  2464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2466 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2467 ;;Total ram usage:        2 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    2
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_initI2C
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text12
  2478  0010D8                     __ptext12:
  2479                           	opt stack 0
  2480  0010D8                     _OpenI2C:
  2481                           	opt stack 26
  2482                           
  2483                           ;incstack = 0
  2484                           ;incstack = 0
  2485  0010D8  0E3F               	movlw	63
  2486  0010DA  16C7               	andwf	4039,f,c	;volatile
  2487  0010DC  0E00               	movlw	0
  2488  0010DE  6EC6               	movwf	4038,c	;volatile
  2489  0010E0  0E00               	movlw	0
  2490  0010E2  6EC5               	movwf	4037,c	;volatile
  2491  0010E4  5020               	movf	OpenI2C@sync_mode,w,c
  2492  0010E6  12C6               	iorwf	4038,f,c	;volatile
  2493  0010E8  5021               	movf	OpenI2C@slew,w,c
  2494  0010EA  12C7               	iorwf	4039,f,c	;volatile
  2495  0010EC  8293               	bsf	3987,1,c	;volatile
  2496  0010EE  8093               	bsf	3987,0,c	;volatile
  2497  0010F0  8AC6               	bsf	4038,5,c	;volatile
  2498  0010F2  0012               	return	
  2499  0010F4                     __end_of_OpenI2C:
  2500                           	opt stack 0
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           indf0	equ	0xFEF
  2508                           postinc0	equ	0xFEE
  2509                           fsr0h	equ	0xFEA
  2510                           fsr0l	equ	0xFE9
  2511                           wreg	equ	0xFE8
  2512                           postinc1	equ	0xFE6
  2513                           postdec1	equ	0xFE5
  2514                           fsr1l	equ	0xFE1
  2515                           indf2	equ	0xFDF
  2516                           postinc2	equ	0xFDE
  2517                           postdec2	equ	0xFDD
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function _write_cmd *****************
  2523 ;; Defined at:
  2524 ;;		line 40 in file "midas_i2c_lcd.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  ucCtrl          1   32[COMRAM] unsigned char 
  2527 ;;  ucData          1   33[COMRAM] unsigned char 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;		None               void
  2532 ;; Registers used:
  2533 ;;		wreg, status,2, status,0, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2539 ;;      Params:         2       0       0       0       0       0       0       0       0
  2540 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2541 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2542 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2543 ;;Total ram usage:        3 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    4
  2546 ;; This function calls:
  2547 ;;		_IdleI2C
  2548 ;;		_WriteI2C
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;;		_initLcd
  2552 ;;		_clearLcd
  2553 ;;		_printStringLcd
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           	psect	text13
  2558  000FC6                     __ptext13:
  2559                           	opt stack 0
  2560  000FC6                     _write_cmd:
  2561                           	opt stack 26
  2562                           
  2563                           ;midas_i2c_lcd.c: 42: IdleI2C();
  2564                           
  2565                           ;incstack = 0
  2566                           ;incstack = 0
  2567  000FC6  EC98  F008         	call	_IdleI2C	;wreg free
  2568                           
  2569                           ;midas_i2c_lcd.c: 43: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  2570  000FCA  80C5               	bsf	4037,0,c	;volatile
  2571  000FCC                     l112:
  2572  000FCC  B0C5               	btfsc	4037,0,c	;volatile
  2573  000FCE  D7FE               	goto	l112
  2574                           
  2575                           ;midas_i2c_lcd.c: 44: IdleI2C();
  2576  000FD0  EC98  F008         	call	_IdleI2C	;wreg free
  2577                           
  2578                           ;midas_i2c_lcd.c: 45: WriteI2C( (0x3E << 1) );
  2579  000FD4  6E23               	movwf	??_write_cmd& (0+255),c
  2580  000FD6  0E7C               	movlw	124
  2581  000FD8  6E20               	movwf	?_WriteI2C,c
  2582  000FDA  5023               	movf	??_write_cmd& (0+255),w,c
  2583  000FDC  EC9B  F007         	call	_WriteI2C	;wreg free
  2584                           
  2585                           ;midas_i2c_lcd.c: 46: IdleI2C();
  2586  000FE0  EC98  F008         	call	_IdleI2C	;wreg free
  2587                           
  2588                           ;midas_i2c_lcd.c: 47: WriteI2C( ucCtrl );
  2589  000FE4  C021  F020         	movff	write_cmd@ucCtrl,?_WriteI2C
  2590  000FE8  EC9B  F007         	call	_WriteI2C	;wreg free
  2591                           
  2592                           ;midas_i2c_lcd.c: 48: IdleI2C();
  2593  000FEC  EC98  F008         	call	_IdleI2C	;wreg free
  2594                           
  2595                           ;midas_i2c_lcd.c: 49: WriteI2C( ucData );
  2596  000FF0  C022  F020         	movff	write_cmd@ucData,?_WriteI2C
  2597  000FF4  EC9B  F007         	call	_WriteI2C	;wreg free
  2598                           
  2599                           ;midas_i2c_lcd.c: 50: IdleI2C();
  2600  000FF8  EC98  F008         	call	_IdleI2C	;wreg free
  2601                           
  2602                           ;midas_i2c_lcd.c: 51: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  2603  000FFC  84C5               	bsf	4037,2,c	;volatile
  2604  000FFE                     l115:
  2605  000FFE  A4C5               	btfss	4037,2,c	;volatile
  2606  001000  0012               	return	
  2607  001002  D7FD               	goto	l115
  2608  001004                     __end_of_write_cmd:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           indf0	equ	0xFEF
  2617                           postinc0	equ	0xFEE
  2618                           fsr0h	equ	0xFEA
  2619                           fsr0l	equ	0xFE9
  2620                           wreg	equ	0xFE8
  2621                           postinc1	equ	0xFE6
  2622                           postdec1	equ	0xFE5
  2623                           fsr1l	equ	0xFE1
  2624                           indf2	equ	0xFDF
  2625                           postinc2	equ	0xFDE
  2626                           postdec2	equ	0xFDD
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _WriteI2C *****************
  2632 ;; Defined at:
  2633 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_writ.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  data_out        1   31[COMRAM] unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      char 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0, cstack
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2647 ;;      Params:         1       0       0       0       0       0       0       0       0
  2648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2650 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2651 ;;Total ram usage:        1 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    3
  2654 ;; This function calls:
  2655 ;;		_IdleI2C
  2656 ;; This function is called by:
  2657 ;;		_readTCN75
  2658 ;;		_write_cmd
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text14
  2663  000F36                     __ptext14:
  2664                           	opt stack 0
  2665  000F36                     _WriteI2C:
  2666                           	opt stack 26
  2667                           
  2668                           ;incstack = 0
  2669                           ;incstack = 0
  2670  000F36  C020  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  2671  000F3A  BEC6               	btfsc	4038,7,c	;volatile
  2672  000F3C  D020               	goto	l249
  2673                           
  2674                           ;	Return value of _WriteI2C is never used
  2675  000F3E  50C6               	movf	4038,w,c	;volatile
  2676  000F40  0B0F               	andlw	15
  2677  000F42  0A08               	xorlw	8
  2678  000F44  B4D8               	btfsc	status,2,c
  2679  000F46  D00C               	goto	l1532
  2680  000F48  50C6               	movf	4038,w,c	;volatile
  2681  000F4A  0B0F               	andlw	15
  2682  000F4C  0A0B               	xorlw	11
  2683  000F4E  B4D8               	btfsc	status,2,c
  2684  000F50  D007               	goto	l1532
  2685  000F52  88C6               	bsf	4038,4,c	;volatile
  2686  000F54                     l252:
  2687  000F54  A69E               	btfss	3998,3,c	;volatile
  2688  000F56  D7FE               	goto	l252
  2689  000F58  B4C7               	btfsc	4039,2,c	;volatile
  2690  000F5A  D011               	goto	l249
  2691  000F5C  50C7               	movf	4039,w,c	;volatile
  2692  000F5E  D00F               	goto	l249
  2693  000F60                     l1532:
  2694  000F60  50C6               	movf	4038,w,c	;volatile
  2695  000F62  0B0F               	andlw	15
  2696  000F64  0A08               	xorlw	8
  2697  000F66  B4D8               	btfsc	status,2,c
  2698  000F68  D005               	goto	l261
  2699  000F6A  50C6               	movf	4038,w,c	;volatile
  2700  000F6C  0B0F               	andlw	15
  2701  000F6E  0A0B               	xorlw	11
  2702  000F70  A4D8               	btfss	status,2,c
  2703  000F72  D005               	goto	l249
  2704  000F74                     l261:
  2705  000F74  B0C7               	btfsc	4039,0,c	;volatile
  2706  000F76  D7FE               	goto	l261
  2707  000F78  EC98  F008         	call	_IdleI2C	;wreg free
  2708  000F7C  50C5               	movf	4037,w,c	;volatile
  2709  000F7E                     l249:
  2710  000F7E  0012               	return	
  2711  000F80                     __end_of_WriteI2C:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           indf0	equ	0xFEF
  2720                           postinc0	equ	0xFEE
  2721                           fsr0h	equ	0xFEA
  2722                           fsr0l	equ	0xFE9
  2723                           wreg	equ	0xFE8
  2724                           postinc1	equ	0xFE6
  2725                           postdec1	equ	0xFE5
  2726                           fsr1l	equ	0xFE1
  2727                           indf2	equ	0xFDF
  2728                           postinc2	equ	0xFDE
  2729                           postdec2	equ	0xFDD
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _IdleI2C *****************
  2735 ;; Defined at:
  2736 ;;		line 25 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_idle.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;		None               void
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    2
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_readTCN75
  2761 ;;		_write_cmd
  2762 ;;		_WriteI2C
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text15
  2767  001130                     __ptext15:
  2768                           	opt stack 0
  2769  001130                     _IdleI2C:
  2770                           	opt stack 26
  2771  001130                     l1510:
  2772  001130  50C5               	movf	4037,w,c	;volatile
  2773  001132  0B1F               	andlw	31
  2774  001134  B4D8               	btfsc	status,2,c
  2775  001136  B4C7               	btfsc	4039,2,c	;volatile
  2776  001138  D7FB               	goto	l1510
  2777  00113A  0012               	return	
  2778  00113C                     __end_of_IdleI2C:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           indf0	equ	0xFEF
  2787                           postinc0	equ	0xFEE
  2788                           fsr0h	equ	0xFEA
  2789                           fsr0l	equ	0xFE9
  2790                           wreg	equ	0xFE8
  2791                           postinc1	equ	0xFE6
  2792                           postdec1	equ	0xFE5
  2793                           fsr1l	equ	0xFE1
  2794                           indf2	equ	0xFDF
  2795                           postinc2	equ	0xFDE
  2796                           postdec2	equ	0xFDD
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _resetLcd *****************
  2802 ;; Defined at:
  2803 ;;		line 85 in file "main.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  i               2   31[COMRAM] int 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;		None               void
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, status,0
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2817 ;;      Params:         0       0       0       0       0       0       0       0       0
  2818 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2820 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        2 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    2
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_main
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text16
  2832  001098                     __ptext16:
  2833                           	opt stack 0
  2834  001098                     _resetLcd:
  2835                           	opt stack 28
  2836                           
  2837                           ;main.c: 86: PORTBbits.RB2 = 0;
  2838                           
  2839                           ;incstack = 0
  2840                           ;incstack = 0
  2841  001098  9481               	bcf	3969,2,c	;volatile
  2842                           
  2843                           ;main.c: 87: for(int i=0; i<0x8ff; i++);
  2844  00109A  0E00               	movlw	0
  2845  00109C  6E21               	movwf	resetLcd@i+1,c
  2846  00109E  0E00               	movlw	0
  2847  0010A0  6E20               	movwf	resetLcd@i,c
  2848  0010A2  5021               	movf	resetLcd@i+1,w,c
  2849  0010A4  0A80               	xorlw	128
  2850  0010A6  0F78               	addlw	-136
  2851  0010A8  0EFF               	movlw	255
  2852  0010AA  B4D8               	btfsc	status,2,c
  2853  0010AC  5C20               	subwf	resetLcd@i,w,c
  2854  0010AE  B0D8               	btfsc	status,0,c
  2855  0010B0  D003               	goto	l65
  2856  0010B2  4A20               	infsnz	resetLcd@i,f,c
  2857  0010B4  2A21               	incf	resetLcd@i+1,f,c
  2858  0010B6  D7F5               	goto	L7
  2859  0010B8                     l65:
  2860                           
  2861                           ;main.c: 88: PORTBbits.RB2 = 1;
  2862  0010B8  8481               	bsf	3969,2,c	;volatile
  2863  0010BA  0012               	return	
  2864  0010BC                     __end_of_resetLcd:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           indf0	equ	0xFEF
  2873                           postinc0	equ	0xFEE
  2874                           fsr0h	equ	0xFEA
  2875                           fsr0l	equ	0xFE9
  2876                           wreg	equ	0xFE8
  2877                           postinc1	equ	0xFE6
  2878                           postdec1	equ	0xFE5
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _InitApp *****************
  2888 ;; Defined at:
  2889 ;;		line 28 in file "user.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;		None               void
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2903 ;;      Params:         0       0       0       0       0       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2906 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2907 ;;Total ram usage:        0 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    2
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text17
  2918  00113C                     __ptext17:
  2919                           	opt stack 0
  2920  00113C                     _InitApp:
  2921                           	opt stack 28
  2922                           
  2923                           ;user.c: 32: ADCON1 |= 0b1111;
  2924                           
  2925                           ;incstack = 0
  2926                           ;incstack = 0
  2927  00113C  0E0F               	movlw	15
  2928  00113E  12C1               	iorwf	4033,f,c	;volatile
  2929                           
  2930                           ;user.c: 33: TRISBbits.TRISB4 = 0;
  2931  001140  9893               	bcf	3987,4,c	;volatile
  2932                           
  2933                           ;user.c: 34: TRISBbits.TRISB2 = 0;
  2934  001142  9493               	bcf	3987,2,c	;volatile
  2935  001144  0012               	return	
  2936  001146                     __end_of_InitApp:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           indf0	equ	0xFEF
  2945                           postinc0	equ	0xFEE
  2946                           fsr0h	equ	0xFEA
  2947                           fsr0l	equ	0xFE9
  2948                           wreg	equ	0xFE8
  2949                           postinc1	equ	0xFE6
  2950                           postdec1	equ	0xFE5
  2951                           fsr1l	equ	0xFE1
  2952                           indf2	equ	0xFDF
  2953                           postinc2	equ	0xFDE
  2954                           postdec2	equ	0xFDD
  2955                           fsr2h	equ	0xFDA
  2956                           fsr2l	equ	0xFD9
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _ConfigureOscillator *****************
  2960 ;; Defined at:
  2961 ;;		line 25 in file "system.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;		None               void
  2968 ;; Registers used:
  2969 ;;		None
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2975 ;;      Params:         0       0       0       0       0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2978 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2979 ;;Total ram usage:        0 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    2
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text18
  2990  001146                     __ptext18:
  2991                           	opt stack 0
  2992  001146                     _ConfigureOscillator:
  2993                           	opt stack 28
  2994                           
  2995                           ;incstack = 0
  2996                           ;incstack = 0
  2997  001146  0012               	return	
  2998  001148                     __end_of_ConfigureOscillator:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           indf0	equ	0xFEF
  3007                           postinc0	equ	0xFEE
  3008                           fsr0h	equ	0xFEA
  3009                           fsr0l	equ	0xFE9
  3010                           wreg	equ	0xFE8
  3011                           postinc1	equ	0xFE6
  3012                           postdec1	equ	0xFE5
  3013                           fsr1l	equ	0xFE1
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           fsr2h	equ	0xFDA
  3018                           fsr2l	equ	0xFD9
  3019                           status	equ	0xFD8
  3020                           
  3021 ;; *************** function _low_isr *****************
  3022 ;; Defined at:
  3023 ;;		line 75 in file "interrupts.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;		None
  3028 ;; Return value:  Size  Location     Type
  3029 ;;		None               void
  3030 ;; Registers used:
  3031 ;;		None
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3037 ;;      Params:         0       0       0       0       0       0       0       0       0
  3038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3039 ;;      Temps:         17       0       0       0       0       0       0       0       0
  3040 ;;      Totals:        17       0       0       0       0       0       0       0       0
  3041 ;;Total ram usage:       17 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    1
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		Interrupt level 1
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	intcodelo
  3052  000018                     __pintcodelo:
  3053                           	opt stack 0
  3054  000018                     _low_isr:
  3055                           	opt stack 25
  3056                           
  3057                           ;incstack = 0
  3058  000018  CFD8 F001          	movff	status,??_low_isr
  3059  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  3060  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  3061  000024  CFFA F004          	movff	pclath,??_low_isr+3
  3062  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  3063  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  3064  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  3065  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  3066  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  3067  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  3068  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  3069  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  3070  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  3071  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  3072  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  3073  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  3074  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  3075  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  3076  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  3077  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  3078  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  3079  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  3080  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  3081  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  3082  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  3083  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  3084  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  3085  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  3086  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  3087  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  3088  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  3089  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  3090  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  3091  00009C  C001  FFD8         	movff	??_low_isr,status
  3092  0000A0  0010               	retfie	
  3093  0000A2                     __end_of_low_isr:
  3094                           	opt stack 0
  3095                           pclatu	equ	0xFFB
  3096                           pclath	equ	0xFFA
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           indf0	equ	0xFEF
  3104                           postinc0	equ	0xFEE
  3105                           fsr0h	equ	0xFEA
  3106                           fsr0l	equ	0xFE9
  3107                           wreg	equ	0xFE8
  3108                           postinc1	equ	0xFE6
  3109                           postdec1	equ	0xFE5
  3110                           fsr1h	equ	0xFE2
  3111                           fsr1l	equ	0xFE1
  3112                           bsr	equ	0xFE0
  3113                           indf2	equ	0xFDF
  3114                           postinc2	equ	0xFDE
  3115                           postdec2	equ	0xFDD
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _high_isr *****************
  3121 ;; Defined at:
  3122 ;;		line 36 in file "interrupts.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;		None               void
  3129 ;; Registers used:
  3130 ;;		None
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3138 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3139 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3140 ;;Total ram usage:       14 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		Interrupt level 2
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	intcode
  3150  000008                     __pintcode:
  3151                           	opt stack 0
  3152  000008                     _high_isr:
  3153                           	opt stack 25
  3154                           
  3155                           ;incstack = 0
  3156  000008  CFFA F012          	movff	pclath,??_high_isr
  3157  00000C  CFFB F013          	movff	pclatu,??_high_isr+1
  3158  000010  EDD8  F006         	call	int_func,f	;refresh shadow registers
  3159                           pclatu	equ	0xFFB
  3160                           pclath	equ	0xFFA
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           indf0	equ	0xFEF
  3168                           postinc0	equ	0xFEE
  3169                           fsr0h	equ	0xFEA
  3170                           fsr0l	equ	0xFE9
  3171                           wreg	equ	0xFE8
  3172                           postinc1	equ	0xFE6
  3173                           postdec1	equ	0xFE5
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           bsr	equ	0xFE0
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184                           	psect	intcode_body
  3185  000DB0                     __pintcode_body:
  3186                           	opt stack 25
  3187  000DB0                     int_func:
  3188                           	opt stack 25
  3189  000DB0  0006               	pop		; remove dummy address from shadow register refresh
  3190  000DB2  CFE9 F014          	movff	fsr0l,??_high_isr+2
  3191  000DB6  CFEA F015          	movff	fsr0h,??_high_isr+3
  3192  000DBA  CFE1 F016          	movff	fsr1l,??_high_isr+4
  3193  000DBE  CFE2 F017          	movff	fsr1h,??_high_isr+5
  3194  000DC2  CFD9 F018          	movff	fsr2l,??_high_isr+6
  3195  000DC6  CFDA F019          	movff	fsr2h,??_high_isr+7
  3196  000DCA  CFF3 F01A          	movff	prodl,??_high_isr+8
  3197  000DCE  CFF4 F01B          	movff	prodh,??_high_isr+9
  3198  000DD2  CFF6 F01C          	movff	tblptrl,??_high_isr+10
  3199  000DD6  CFF7 F01D          	movff	tblptrh,??_high_isr+11
  3200  000DDA  CFF8 F01E          	movff	tblptru,??_high_isr+12
  3201  000DDE  CFF5 F01F          	movff	tablat,??_high_isr+13
  3202  000DE2  C01F  FFF5         	movff	??_high_isr+13,tablat
  3203  000DE6  C01E  FFF8         	movff	??_high_isr+12,tblptru
  3204  000DEA  C01D  FFF7         	movff	??_high_isr+11,tblptrh
  3205  000DEE  C01C  FFF6         	movff	??_high_isr+10,tblptrl
  3206  000DF2  C01B  FFF4         	movff	??_high_isr+9,prodh
  3207  000DF6  C01A  FFF3         	movff	??_high_isr+8,prodl
  3208  000DFA  C019  FFDA         	movff	??_high_isr+7,fsr2h
  3209  000DFE  C018  FFD9         	movff	??_high_isr+6,fsr2l
  3210  000E02  C017  FFE2         	movff	??_high_isr+5,fsr1h
  3211  000E06  C016  FFE1         	movff	??_high_isr+4,fsr1l
  3212  000E0A  C015  FFEA         	movff	??_high_isr+3,fsr0h
  3213  000E0E  C014  FFE9         	movff	??_high_isr+2,fsr0l
  3214  000E12  C013  FFFB         	movff	??_high_isr+1,pclatu
  3215  000E16  C012  FFFA         	movff	??_high_isr,pclath
  3216  000E1A  0011               	retfie		f
  3217  000E1C                     __end_of_high_isr:
  3218                           	opt stack 0
  3219                           pclatu	equ	0xFFB
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           indf0	equ	0xFEF
  3228                           postinc0	equ	0xFEE
  3229                           fsr0h	equ	0xFEA
  3230                           fsr0l	equ	0xFE9
  3231                           wreg	equ	0xFE8
  3232                           postinc1	equ	0xFE6
  3233                           postdec1	equ	0xFE5
  3234                           fsr1h	equ	0xFE2
  3235                           fsr1l	equ	0xFE1
  3236                           bsr	equ	0xFE0
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           pclatu	equ	0xFFB
  3244                           pclath	equ	0xFFA
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           indf0	equ	0xFEF
  3252                           postinc0	equ	0xFEE
  3253                           fsr0h	equ	0xFEA
  3254                           fsr0l	equ	0xFE9
  3255                           wreg	equ	0xFE8
  3256                           postinc1	equ	0xFE6
  3257                           postdec1	equ	0xFE5
  3258                           fsr1h	equ	0xFE2
  3259                           fsr1l	equ	0xFE1
  3260                           bsr	equ	0xFE0
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268                           	psect	rparam
  3269  0000                     pclatu	equ	0xFFB
  3270                           pclath	equ	0xFFA
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           indf0	equ	0xFEF
  3278                           postinc0	equ	0xFEE
  3279                           fsr0h	equ	0xFEA
  3280                           fsr0l	equ	0xFE9
  3281                           wreg	equ	0xFE8
  3282                           postinc1	equ	0xFE6
  3283                           postdec1	equ	0xFE5
  3284                           fsr1h	equ	0xFE2
  3285                           fsr1l	equ	0xFE1
  3286                           bsr	equ	0xFE0
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8


Data Sizes:
    Strings     51
    Constant    10
    Data        16
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      64
    BANK0           160     64      97
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?_readTCN75	short  size(2) Largest target is 0

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 33
		 -> main@str(BANK0[33]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S493$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    printStringLcd@ucStr	PTR const unsigned char  size(2) Largest target is 33
		 -> main@str(BANK0[33]), STR_1(CODE[27]), 

    initLcd@ucInitSequence	PTR unsigned char  size(2) Largest target is 8
		 -> uc3V3SupplyInitSequence(COMRAM[8]), uc5VSupplyInitSequence(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _readTCN75->_WriteI2C
    _printStringLcd->_write_cmd
    _clearLcd->_write_cmd
    _initLcd->_write_cmd
    _initLcd->_initI2C
    _initI2C->_OpenI2C
    _write_cmd->_WriteI2C

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0    2820
                                             22 BANK0     42    42      0
                _ConfigureOscillator
                            _InitApp
                           _resetLcd
                            _initLcd
                           _clearLcd
                     _printStringLcd
                          _write_cmd
                          _readTCN75
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10    1872
                                             45 COMRAM     3     3      0
                                              0 BANK0     22    12     10
                            _isdigit
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     159
                                             39 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     162
                                             31 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     2      1      68
                                             31 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _readTCN75                                            4     2      2      89
                                             32 COMRAM     4     2      2
                            _IdleI2C
                           _WriteI2C
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (2) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printStringLcd                                       4     2      2     133
                                             35 COMRAM     4     2      2
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0      66
                                             35 COMRAM     2     2      0
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initLcd                                              9     5      4     225
                                             35 COMRAM     9     5      4
                          _write_cmd
                            _initI2C
 ---------------------------------------------------------------------------------
 (2) _initI2C                                              2     2      0      44
                                             33 COMRAM     2     2      0
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (3) _OpenI2C                                              2     0      2      44
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     1      2      66
                                             32 COMRAM     3     1      2
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _WriteI2C                                             1     0      1      22
                                             31 COMRAM     1     0      1
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (3) _IdleI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetLcd                                             2     2      0      46
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _resetLcd
   _initLcd
     _write_cmd
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _initI2C
       _OpenI2C
   _clearLcd
     _write_cmd
       _IdleI2C
       _WriteI2C
         _IdleI2C
   _printStringLcd
     _write_cmd
       _IdleI2C
       _WriteI2C
         _IdleI2C
   _write_cmd
     _IdleI2C
     _WriteI2C
       _IdleI2C
   _readTCN75
     _IdleI2C
     _WriteI2C
       _IdleI2C
     _ReadI2C
   _sprintf
     _isdigit
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      61       5       60.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     30      40       1       67.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       4       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      20        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Mar 22 20:16:40 2014

                 _SSPSTATbits 000FC7                            l53 0C74                            l72 0E4C  
                          l56 0CBC                            l65 10B8                            l75 0E6E  
                          l69 0E22                            l78 0E74                   __CFG_BOR$ON 000000  
                          bsr 000FE0           ___wmul@multiplicand 0022                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_WDT$ON 000000                           l112 0FCC  
                         l115 0FFE                           l131 0EDE                           l227 10CE  
                         l252 0F54                           l228 10D0                           l261 0F74  
                         l249 0F7E                           l776 0F2C                           l786 0FBC  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           i1l6 005C  
                         i2l3 0DE2                           u750 0D42                           u770 0D82  
                         u780 0DA8                           u757 0D3C                           u777 0D7C  
                         u787 0DA2                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                        l1510 1130                          l1344 0EA0                          l1360 0D26  
                        l1532 0F60                          l1364 0D5E                          l1612 0FB2  
                        l1604 0F92                          l1700 0892                          l1366 0D88  
                        l1606 0F9A                          l1710 08DE                          l1368 0D8C  
                        l1608 0F9E                          l1800 0BC0                          l1720 094A  
                        l1704 08A0                          l1722 097C                          l1732 09BC  
                        l1574 1090                          l1654 0C46                          l1584 0EFA  
                        l1752 0A32                          l1586 0F02                          l1746 0A10  
                        l1690 0852                          l1596 0F22                          l1588 0F06  
                        l1756 0A74                          l1676 0CA2                          l1790 0B30  
                        l1782 0B0A                          l1766 0AAA                          l1774 0AD6  
                        l1758 0A82                          l1776 0AE2                          l1696 0876  
                        l1796 0B90                          l1788 0B2A                          l1798 0B9E  
                        STR_1 080A                          STR_2 0825                          u1261 0C3E  
                        _main 0BCE                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        pclat 000FFA                          prodh 000FF4                          prodl 000FF3  
                        start 00A2                 __CFG_IESO$OFF 000000               __end_of_IdleI2C 113C  
               __CFG_MCLRE$ON 000000               __end_of_ReadI2C 10D8               __end_of_InitApp 1146  
             __end_of_OpenI2C 10F4                 __CFG_PLLDIV$2 000000                __CFG_CCP2MX$ON 000000  
                       ?_main 0001               __end_of___lwdiv 0F36               __end_of___lwmod 0FC6  
              readTCN75@tmpHi 0024                 __CFG_USBDIV$2 000000           _ConfigureOscillator 1146  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initI2C 1120                __CFG_EBTRB$OFF 000000  
             __end_of_initLcd 0EE0               __end_of_dpowers 080A               __end_of_isdigit 1098  
                       main@i 009C               __end_of_low_isr 00A2                         tablat 000FF5  
                       status 000FD8               __end_of_sprintf 0BCE                __CFG_ICPRT$OFF 000000  
             write_cmd@ucData 0022                __CFG_PBADEN$ON 000000          ?_ConfigureOscillator 0001  
             write_cmd@ucCtrl 0021               __initialization 103E                  __end_of_main 0D24  
            initLcd@ulOptions 0024           printStringLcd@ucStr 0024                        ??_main 0076  
               __activetblptr 000002                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADRESH 000FC4              __end_of_WriteI2C 0F80                   OpenI2C@slew 0021  
                   ??_IdleI2C 0020                        _SSPBUF 000FC9                     ??_ReadI2C 0020  
                   ??_InitApp 0020         ??_ConfigureOscillator 0020              __end_of_clearLcd 110A  
                   ??_OpenI2C 0022                __CFG_XINST$OFF 000000              __end_of_high_isr 0E1C  
                      ___wmul 1004                __CFG_STVREN$ON 000000                     ??___lwdiv 0024  
                   ??___lwmod 002C                        clear_0 1044              ??_printStringLcd 0026  
                   ??_initI2C 0022                     ??_initLcd 0028              __end_of_resetLcd 10BC  
                __pdataCOMRAM 0031                     ??_isdigit 0021                  __mediumconst 0000  
                   ??_low_isr 0001                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_sprintf 002E                    __accesstop 0060  
     __end_of__initialization 106A                __pcstackCOMRAM 0001                  sprintf@width 0073  
                  __pbssBANK0 00A0            __size_of_readTCN75 0064                       ?___wmul 0020  
                   ?_WriteI2C 0020                     ?_clearLcd 0001                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                     ?_high_isr 0001                       _SSPSTAT 000FC7  
                     _IdleI2C 1130               __CFG_VREGEN$OFF 000000                       _ReadI2C 10BC  
                     _InitApp 113C            __size_of_write_cmd 003E                       _OpenI2C 10D8  
                     __Hparam 0000                     ?_resetLcd 0001                       __Lparam 0000  
             __size_of___wmul 003A                       ___lwdiv 0EE0                       ___lwmod 0F80  
                __psmallconst 0800                       __pcinit 103E                    ??_WriteI2C 0021  
                     __ramtop 0800             __end_of_readTCN75 0E80                       __ptext0 0BCE  
                     __ptext1 083E                       __ptext2 1004                       __ptext3 0F80  
                     __ptext4 0EE0                       __ptext5 1074                       __ptext6 0E1C  
                     __ptext7 10BC                       __ptext8 0D24                       __ptext9 10F4  
                     _initI2C 110A                       _initLcd 0E80                       _dpowers 0800  
                     _isdigit 1074                    ??_clearLcd 0024                       _low_isr 0018  
                     _sprintf 083E                       main@str 0078                    ??_high_isr 0012  
              __pintcode_body 0DB0          end_of_initialization 106A                 __Lmediumconst 0000  
                     int_func 0DB0                    ??_resetLcd 0020                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE                     _PORTAbits 000F80                     _PORTBbits 000F81  
           __end_of_write_cmd 1004                     _TRISAbits 000F92                     _TRISBbits 000F93  
 __end_of_ConfigureOscillator 1148                 readTCN75@addr 0021                __end_of___wmul 103E  
               __pidataCOMRAM 1120           start_initialization 103E              WriteI2C@data_out 0020  
      _uc5VSupplyInitSequence 0039                      ??___wmul 0024              __CFG_LPT1OSC$OFF 000000  
       initLcd@ucInitSequence 0029             __size_of_WriteI2C 004A                 __pcstackBANK0 0060  
         __end_of__stringdata 083D                  _isdigit$1286 0022             __size_of_clearLcd 0016  
     __size_of_printStringLcd 008C                      ?_IdleI2C 0001             __size_of_high_isr 0E14  
                 sprintf@_val 006D                   sprintf@flag 0072                   sprintf@prec 006C  
                    ?_ReadI2C 0001                      ?_InitApp 0001                      ?_OpenI2C 0020  
            ___lwdiv@dividend 0020                     __pintcode 0008             __size_of_resetLcd 0024  
                    ?___lwdiv 0020                      ?___lwmod 0028                   __pintcodelo 0018  
                    ?_initI2C 0001                   __smallconst 0800                      ?_initLcd 0024  
                    ?_isdigit 0020                     _readTCN75 0E1C                      ?_low_isr 0001  
            ___lwdiv@quotient 0025                      ?_sprintf 0060                ___wmul@product 0024  
                    _PIR1bits 000F9E              __CFG_WDTPS$32768 000000                     main@F5358 00A0  
                  _ADCON0bits 000FC2                   __stringdata 080A                     main@i_364 009E  
           ___wmul@multiplier 0020                     main@count 009A                    ?_readTCN75 0021  
                   _write_cmd 0FC6                     copy_data0 105E              OpenI2C@sync_mode 0020  
            __size_of_IdleI2C 000C              __size_of_ReadI2C 001C              __size_of_InitApp 000A  
                    __Hrparam 0000              __size_of_OpenI2C 001C                      __Lrparam 0000  
            __size_of___lwdiv 0056              __size_of___lwmod 0046                      _WriteI2C 0F36  
            __size_of_initI2C 0016              __size_of_initLcd 0060                      _clearLcd 10F4  
            __size_of_isdigit 0024               ___lwdiv@divisor 0022               ___lwdiv@counter 0027  
            __size_of_low_isr 008A                      __ptext10 0E80                      __ptext11 110A  
                    __ptext12 10D8                      __ptext13 0FC6                      __ptext14 0F36  
                    __ptext15 1130                      __ptext16 1098                      __ptext17 113C  
                    __ptext18 1146                    ?_write_cmd 0021                _printStringLcd 0D24  
                    _high_isr 0008              __size_of_sprintf 0390                     resetLcd@i 0020  
               __size_of_main 0156  __size_of_ConfigureOscillator 0002                      _resetLcd 1098  
                    main@temp 0099         __CFG_CPUDIV$OSC1_PLL2 000000                      initLcd@i 002B  
                 ??_readTCN75 0023        __end_of_printStringLcd 0DB0                      isdigit@c 0020  
                    intlevel1 0000                      intlevel2 0000                     sprintf@ap 006A  
                   sprintf@sp 0060              ___lwmod@dividend 0028                      sprintf@c 0075  
                    sprintf@f 0062           __CFG_FOSC$INTOSC_HS 000000               ___lwmod@divisor 002A  
             ___lwmod@counter 002D               ?_printStringLcd 0024                   _SSPCON1bits 000FC6  
                 _SSPCON2bits 000FC5       _uc3V3SupplyInitSequence 0031                   ??_write_cmd 0023  
